Notebook[{

Cell[CellGroupData[{
Cell["Definitions", "Section",
 CellChangeTimes->{{3.668429558834918*^9, 3.668429561407576*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.668429837642713*^9, 3.668429846449486*^9}}],

Cell["\<\
Eventually, these functions may want to use the Notation` package to actually \
make the subscripted letters have downvalues. For now, I\[CloseCurlyQuote]m \
just being careful.\
\>", "Text",
 CellChangeTimes->{{3.668539646692463*^9, 3.6685396880617914`*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "@", "ClearSubscripts"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearSubscripts", "[", "top_", "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Unset", "[", 
        RowBox[{"Evaluate", "[", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ";", 
       RowBox[{"Evaluate", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}], "&"}], "/@", 
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"DownValues", "[", "Subscript", "]"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1", ",", "1"}], "]"}], "]"}], "\[Equal]", 
        "top"}], "&"}]}], "]"}]}], "\[IndentingNewLine]", 
   ")"}]}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "@", "unknownArray"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"unknownArray", "[", 
   RowBox[{"top_", ",", 
    RowBox[{"dim_", "/;", 
     RowBox[{"NumberQ", "[", "dim", "]"}]}]}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"Table", "[", 
    RowBox[{
     SubscriptBox["top", "i"], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "dim"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
   ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"unknownArray", "[", 
   RowBox[{"top_", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"dim1_", "/;", 
       RowBox[{"NumberQ", "[", "dim1", "]"}]}], ",", 
      RowBox[{"dim2_", "/;", 
       RowBox[{"NumberQ", "[", "dim2", "]"}]}]}], "}"}]}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"Table", "[", 
    RowBox[{
     SubscriptBox["top", 
      RowBox[{"i", ",", "j"}]], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "dim1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "dim2"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
   ")"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.668429563050755*^9, 3.668429577667501*^9}, {
  3.668429995413262*^9, 3.6684301083178*^9}, {3.668430140359806*^9, 
  3.6684302377840242`*^9}, {3.668430291492435*^9, 3.668430298866539*^9}, {
  3.668430703301008*^9, 3.668430705542173*^9}, {3.6684307363686743`*^9, 
  3.6684307618355217`*^9}, {3.668539638584363*^9, 3.6685396435793533`*^9}, {
  3.6685397761791153`*^9, 3.668539781323637*^9}, {3.66853998693328*^9, 
  3.6685399976749444`*^9}, {3.6685400277450047`*^9, 3.668540060531209*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Investment", "Section",
 CellChangeTimes->{{3.6685395850348673`*^9, 3.668539609583391*^9}, {
  3.6685397057535257`*^9, 3.668539707082057*^9}}],

Cell[CellGroupData[{

Cell["Pt 1", "Subsection",
 CellChangeTimes->{{3.668426139270322*^9, 3.66842614074362*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"(", GridBox[{
      {"\"\<Chris\>\"", "100", "100", "100"},
      {"\"\<Rebecca\>\"", "100", "200", "200"},
      {"\"\<Siddhartan\>\"", "50", "50", "200"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"stocks", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     TemplateBox[{InterpretationBox[
        TagBox[
         InterpretationBox["\"100.00\"", 100., AutoDelete -> True], 
         NumberForm[#, {Infinity, 2}, DigitBlock -> 3, NumberSeparator -> 
          "\[ThinSpace]"]& ], 100., Selectable -> False],RowBox[{
         FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}],"US dollars",
       "\"USDollars\""},
      "QuantityPrefix"], ",", 
     TemplateBox[{InterpretationBox[
        TagBox[
         InterpretationBox["\"50.00\"", 50., AutoDelete -> True], 
         NumberForm[#, {Infinity, 2}, DigitBlock -> 3, NumberSeparator -> 
          "\[ThinSpace]"]& ], 50., Selectable -> False],RowBox[{
         FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}],"US dollars",
       "\"USDollars\""},
      "QuantityPrefix"], ",", 
     TemplateBox[{InterpretationBox[
        TagBox[
         InterpretationBox["\"20.00\"", 20., AutoDelete -> True], 
         NumberForm[#, {Infinity, 2}, DigitBlock -> 3, NumberSeparator -> 
          "\[ThinSpace]"]& ], 20., Selectable -> False],RowBox[{
         FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}],"US dollars",
       "\"USDollars\""},
      "QuantityPrefix"]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.668425270252419*^9, 3.6684253772616577`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", ".", "stocks"}], "//", "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"A", ".", "stocks"}], "/.", 
   RowBox[{
    RowBox[{"x_", "+", "y_"}], "\[RuleDelayed]", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}]}], "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.668425373440592*^9, 3.668425393926838*^9}, {
  3.668425424687324*^9, 3.6684254442966213`*^9}, {3.668425651108528*^9, 
  3.668425660505175*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{"\<\"Chris\"\>", "+", 
        TemplateBox[{InterpretationBox[
           TagBox[
            InterpretationBox[
            "\"17\[ThinSpace]000.00\"", 17000., AutoDelete -> True], 
            NumberForm[#, {Infinity, 2}, DigitBlock -> 3, NumberSeparator -> 
             "\[ThinSpace]"]& ], 17000., Selectable -> False],RowBox[{
            FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}],
          "US dollars","\"USDollars\""},
         "QuantityPrefix"]}]},
      {
       RowBox[{"\<\"Rebecca\"\>", "+", 
        TemplateBox[{InterpretationBox[
           TagBox[
            InterpretationBox[
            "\"24\[ThinSpace]000.00\"", 24000., AutoDelete -> True], 
            NumberForm[#, {Infinity, 2}, DigitBlock -> 3, NumberSeparator -> 
             "\[ThinSpace]"]& ], 24000., Selectable -> False],RowBox[{
            FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}],
          "US dollars","\"USDollars\""},
         "QuantityPrefix"]}]},
      {
       RowBox[{"\<\"Siddhartan\"\>", "+", 
        TemplateBox[{InterpretationBox[
           TagBox[
            InterpretationBox[
            "\"11\[ThinSpace]500.00\"", 11500., AutoDelete -> True], 
            NumberForm[#, {Infinity, 2}, DigitBlock -> 3, NumberSeparator -> 
             "\[ThinSpace]"]& ], 11500., Selectable -> False],RowBox[{
            FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}],
          "US dollars","\"USDollars\""},
         "QuantityPrefix"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668425381226571*^9, 3.668425394128345*^9}, 
   3.668425445101555*^9, {3.668425644869124*^9, 3.668425661214363*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"\<\"Chris\"\>", 
      TemplateBox[{InterpretationBox[
         TagBox[
          InterpretationBox[
          "\"17\[ThinSpace]000.00\"", 17000., AutoDelete -> True], 
          NumberForm[#, {Infinity, 2}, DigitBlock -> 3, NumberSeparator -> 
           "\[ThinSpace]"]& ], 17000., Selectable -> False],RowBox[{
          FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}],
        "US dollars","\"USDollars\""},
       "QuantityPrefix"]},
     {"\<\"Rebecca\"\>", 
      TemplateBox[{InterpretationBox[
         TagBox[
          InterpretationBox[
          "\"24\[ThinSpace]000.00\"", 24000., AutoDelete -> True], 
          NumberForm[#, {Infinity, 2}, DigitBlock -> 3, NumberSeparator -> 
           "\[ThinSpace]"]& ], 24000., Selectable -> False],RowBox[{
          FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}],
        "US dollars","\"USDollars\""},
       "QuantityPrefix"]},
     {"\<\"Siddhartan\"\>", 
      TemplateBox[{InterpretationBox[
         TagBox[
          InterpretationBox[
          "\"11\[ThinSpace]500.00\"", 11500., AutoDelete -> True], 
          NumberForm[#, {Infinity, 2}, DigitBlock -> 3, NumberSeparator -> 
           "\[ThinSpace]"]& ], 11500., Selectable -> False],RowBox[{
          FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}],
        "US dollars","\"USDollars\""},
       "QuantityPrefix"]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668425381226571*^9, 3.668425394128345*^9}, 
   3.668425445101555*^9, {3.668425644869124*^9, 3.668425661219041*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pt 2", "Subsection",
 CellChangeTimes->{{3.668426143166976*^9, 3.6684261438514013`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearSubscripts", "[", "x", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"unknown", "=", 
   RowBox[{"unknownArray", "[", 
    RowBox[{"x", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"money", "=", 
   RowBox[{"(", GridBox[{
      {"1500", "1600", "1400"},
      {"2600", "2810", "2550"},
      {"950", "1020", "1000"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"prices", "=", 
   RowBox[{"(", GridBox[{
      {"100", "110", "100"},
      {"50", "50", "40"},
      {"20", "22", "30"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eqn", "=", 
   RowBox[{
    RowBox[{"unknown", ".", "prices"}], "\[Equal]", "money"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.668426162130303*^9, 3.668426221895123*^9}, {
   3.668426347554722*^9, 3.668426466899002*^9}, {3.6684265175184507`*^9, 
   3.668426522743373*^9}, {3.668427256234973*^9, 3.668427289502692*^9}, {
   3.668427321615507*^9, 3.6684273708384237`*^9}, {3.6685397458095417`*^9, 
   3.668539765141237*^9}, 3.668539795310299*^9, {3.668539976895135*^9, 
   3.6685400076520247`*^9}, {3.66854004845026*^9, 3.668540065826288*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{"eqn", ",", 
    RowBox[{"Variables", "[", "eq", "]"}]}], "]"}], "[", 
  RowBox[{"[", "1", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", 
   RowBox[{"unknown", "/.", "%"}], ")"}], "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.668426468534017*^9, 3.668426560231889*^9}, {
   3.6684267812085533`*^9, 3.668426829358033*^9}, {3.668427389430105*^9, 
   3.668427396820607*^9}, 3.6685397991043634`*^9, {3.668540075912182*^9, 
   3.6685400783772984`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"1", ",", "1"}]], "\[Rule]", "10"}], ",", 
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"1", ",", "2"}]], "\[Rule]", "10"}], ",", 
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"1", ",", "3"}]], "\[Rule]", "0"}], ",", 
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"2", ",", "1"}]], "\[Rule]", "20"}], ",", 
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"2", ",", "2"}]], "\[Rule]", "10"}], ",", 
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"2", ",", "3"}]], "\[Rule]", "5"}], ",", 
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"3", ",", "1"}]], "\[Rule]", "5"}], ",", 
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"3", ",", "2"}]], "\[Rule]", "5"}], ",", 
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"3", ",", "3"}]], "\[Rule]", "10"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.668426474132457*^9, 3.6684265605015*^9}, {
   3.6684267824931307`*^9, 3.668426829770911*^9}, {3.668427278963942*^9, 
   3.668427291524355*^9}, {3.6684273364944477`*^9, 3.668427398431326*^9}, 
   3.668539799354047*^9, {3.6685400723373237`*^9, 3.668540078673736*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"10", "10", "0"},
     {"20", "10", "5"},
     {"5", "5", "10"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668426474132457*^9, 3.6684265605015*^9}, {
   3.6684267824931307`*^9, 3.668426829770911*^9}, {3.668427278963942*^9, 
   3.668427291524355*^9}, {3.6684273364944477`*^9, 3.668427398431326*^9}, 
   3.668539799354047*^9, {3.6685400723373237`*^9, 3.668540078673736*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.668539628097887*^9, 3.668539629627415*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Physics", "Section",
 CellChangeTimes->{{3.6685400921492696`*^9, 3.6685400934910417`*^9}}],

Cell["Helper function: 2D scalar cross product", "Text",
 CellChangeTimes->{{3.66854114476785*^9, 3.6685411537333155`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "@", "cross"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cross", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Append", "[", 
      RowBox[{"a", ",", "0"}], "]"}], "\[Cross]", 
     RowBox[{"Append", "[", 
      RowBox[{"b", ",", "0"}], "]"}]}], ")"}], "[", 
   RowBox[{"[", "3", "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.6685411555623307`*^9, 3.6685412056338997`*^9}}],

Cell["\<\
Step 1: calculate the equivalent force (and location) of the lift.\
\>", "Text",
 CellChangeTimes->{{3.668540763372733*^9, 3.668540778168934*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "@", "liftforce"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"liftforce", "[", "x_", "]"}], ":=", 
  RowBox[{"200", " ", 
   RowBox[{"Sqrt", "[", 
    RowBox[{"1", "-", 
     RowBox[{
      RowBox[{"x", "^", "2"}], "/", "17"}]}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"intercept", "=", 
   RowBox[{"x", "/.", 
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"liftforce", "[", "x", "]"}], "\[Equal]", "0"}], ",", 
         RowBox[{"x", ">", "0"}]}], "}"}], ",", "x"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"{", 
   RowBox[{"liftmag", ",", "liftpos"}], "}"}], "=", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "x"}], "}"}], "*", 
      RowBox[{"liftforce", "[", "x", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "intercept"}], "}"}]}], "]"}], "/.", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"t_", ",", "x_"}], "}"}], "\[RuleDelayed]", 
    RowBox[{"{", 
     RowBox[{"t", ",", 
      RowBox[{"x", "/", "t"}]}], "}"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.668540800046626*^9, 3.6685408099837627`*^9}, {
  3.6685408801675043`*^9, 3.6685409884809656`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"50", " ", 
    SqrtBox["17"], " ", "\[Pi]"}], ",", 
   FractionBox[
    RowBox[{"4", " ", 
     SqrtBox["17"]}], 
    RowBox[{"3", " ", "\[Pi]"}]]}], "}"}]], "Output",
 CellChangeTimes->{{3.6685409545639057`*^9, 3.668540990655795*^9}}]
}, Open  ]],

Cell["\<\
Step 2: Define the forces (and associated radii) for each force and moment.
Force 1 is between the wing and the fuselage
Force 2 is between the strut and wing
Force 3 is lift\
\>", "Text",
 CellChangeTimes->{{3.6685409994801197`*^9, 3.668541016299924*^9}, {
  3.66854104787895*^9, 3.668541077751565*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"F1", "=", 
   RowBox[{"unknownArray", "[", 
    RowBox[{"f1", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"F2", "=", 
   RowBox[{"unknownArray", "[", 
    RowBox[{"f2", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"F3", "=", 
   RowBox[{"{", 
    RowBox[{"0", ",", "liftmag"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r1", "=", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r2", "=", 
   RowBox[{"{", 
    RowBox[{"2", ",", "0"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r3", "=", 
   RowBox[{"{", 
    RowBox[{"liftpos", ",", "0"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.668541081911996*^9, 3.6685411054383626`*^9}, {
  3.668541222200424*^9, 3.668541338199676*^9}}],

Cell["Setup motion equations", "Text",
 CellChangeTimes->{{3.668541357718416*^9, 3.66854136364606*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"forceeqn", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{
     RowBox[{"F1", "+", "F2", "+", "F3"}], "\[Equal]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"momenteqn", "=", 
   RowBox[{
    RowBox[{"m", "+", 
     RowBox[{"cross", "[", 
      RowBox[{"r1", ",", "F1"}], "]"}], "+", 
     RowBox[{"cross", "[", 
      RowBox[{"r2", ",", "F2"}], "]"}], "+", 
     RowBox[{"cross", "[", 
      RowBox[{"r3", ",", "F3"}], "]"}]}], "\[Equal]", "0"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.668541370234507*^9, 3.6685414355865746`*^9}, {
  3.668541959088521*^9, 3.668541960591502*^9}, {3.6685421255841417`*^9, 
  3.668542130625942*^9}}],

Cell["Solution strategy 1: use Solve[]", "Text",
 CellChangeTimes->{{3.668541440257615*^9, 3.6685414473784533`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"forceeqn", ",", "momenteqn"}], "}"}], ",", 
   RowBox[{"Variables", "@", 
    RowBox[{"{", 
     RowBox[{"forceeqn", ",", "momenteqn"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6685414515412416`*^9, 3.668541473256336*^9}, {
  3.6685415149410176`*^9, 3.6685415325537205`*^9}, {3.6685417820309668`*^9, 
  3.6685417944292097`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     SubscriptBox["f1", "2"], "\[Rule]", 
     RowBox[{
      FractionBox["m", "2"], "-", 
      RowBox[{
       FractionBox["50", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "34"}], "+", 
         RowBox[{"3", " ", 
          SqrtBox["17"], " ", "\[Pi]"}]}], ")"}]}]}]}], ",", 
    RowBox[{
     SubscriptBox["f2", "1"], "\[Rule]", 
     RowBox[{"-", 
      SubscriptBox["f1", "1"]}]}], ",", 
    RowBox[{
     SubscriptBox["f2", "2"], "\[Rule]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1700", "3"]}], "-", 
      FractionBox["m", "2"]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6685414737429113`*^9, 3.668541533386879*^9, {3.6685417764100375`*^9, 
   3.668541794980603*^9}, 3.668541963547264*^9}]
}, Open  ]],

Cell["Solution strategy 2: use Reduce[]", "Text",
 CellChangeTimes->{{3.668541481250531*^9, 3.668541490838642*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"forceeqn", ",", "momenteqn"}], "}"}], ",", 
   RowBox[{"Variables", "@", 
    RowBox[{"{", 
     RowBox[{"forceeqn", ",", "momenteqn"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6685414515412416`*^9, 3.6685414996965914`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["f1", "1"], "\[Equal]", 
   RowBox[{"-", 
    SubscriptBox["f2", "1"]}]}], "&&", 
  RowBox[{
   SubscriptBox["f1", "2"], "\[Equal]", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "50"}], " ", 
     SqrtBox["17"], " ", "\[Pi]"}], "-", 
    SubscriptBox["f2", "2"]}]}], "&&", 
  RowBox[{"m", "\[Equal]", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["3400", "3"]}], "-", 
    RowBox[{"2", " ", 
     SubscriptBox["f2", "2"]}]}]}]}]], "Output",
 CellChangeTimes->{3.6685415048033314`*^9, 3.6685415358167553`*^9, 
  3.668541965209244*^9}]
}, Open  ]],

Cell["Solution strategy 3: use a matrix", "Text",
 CellChangeTimes->{{3.668541536990695*^9, 3.6685415515607567`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"vars", "=", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["f1", "1"], ",", 
     SubscriptBox["f2", "1"], ",", 
     SubscriptBox["f1", "2"], ",", 
     SubscriptBox["f2", "2"], ",", "m"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.66854155246751*^9, 3.668541564457101*^9}, {
  3.6685416952850523`*^9, 3.6685417004313912`*^9}, {3.668541807738641*^9, 
  3.668541850904892*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"b", ",", "a"}], "}"}], "=", 
   RowBox[{"Normal", "@", 
    RowBox[{"CoefficientArrays", "[", 
     RowBox[{
      RowBox[{"Flatten", "@", 
       RowBox[{"{", 
        RowBox[{"forceeqn", ",", "momenteqn"}], "}"}]}], ",", "vars"}], 
     "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HoldForm", "@", "A"}], "\[Equal]", 
  RowBox[{"(", 
   RowBox[{"a", "//", "MatrixForm"}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HoldForm", "@", "b"}], "\[Equal]", 
  RowBox[{"(", 
   RowBox[{"b", "//", "MatrixForm"}], ")"}]}]}], "Input",
 CellChangeTimes->{{3.6685422769855423`*^9, 3.668542297217142*^9}, {
  3.668542358223342*^9, 3.6685424989048395`*^9}}],

Cell[BoxData[
 RowBox[{
  TagBox["A",
   HoldForm], "\[Equal]", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"1", "1", "0", "0", "0"},
      {"0", "0", "1", "1", "0"},
      {"0", "0", "0", "2", "1"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{
  3.668542297796342*^9, {3.6685423597531424`*^9, 3.668542389028542*^9}, {
   3.668542428910942*^9, 3.668542499232444*^9}}],

Cell[BoxData[
 RowBox[{
  TagBox["b",
   HoldForm], "\[Equal]", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", 
    TagBox[GridBox[{
       {"0"},
       {
        RowBox[{"50", " ", 
         SqrtBox["17"], " ", "\[Pi]"}]},
       {
        FractionBox["3400", "3"]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{
  3.668542297796342*^9, {3.6685423597531424`*^9, 3.668542389028542*^9}, {
   3.668542428910942*^9, 3.668542499232444*^9}}]
}, Open  ]],

Cell["Now, the solution has been reduced to the form [A.vars=b].", "Text",
 CellChangeTimes->{{3.668542507877757*^9, 3.66854261801621*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"a", ".", "vars"}], "\[Equal]", "b"}], ",", "vars"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.668542664993208*^9, 3.668542675106138*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "svars"}], "MessageName"], ":", 
  " ", "\<\"Equations may not give solutions for all \\\"solve\\\" variables. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/Solve/svars\\\", \
ButtonNote -> \\\"Solve::svars\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.668542675778947*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     SubscriptBox["f2", "1"], "\[Rule]", 
     RowBox[{"-", 
      SubscriptBox["f1", "1"]}]}], ",", 
    RowBox[{
     SubscriptBox["f2", "2"], "\[Rule]", 
     RowBox[{
      RowBox[{"50", " ", 
       SqrtBox["17"], " ", "\[Pi]"}], "-", 
      SubscriptBox["f1", "2"]}]}], ",", 
    RowBox[{"m", "\[Rule]", 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        FractionBox["100", "3"]}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "34"}], "+", 
         RowBox[{"3", " ", 
          SqrtBox["17"], " ", "\[Pi]"}]}], ")"}]}], "+", 
      RowBox[{"2", " ", 
       SubscriptBox["f1", "2"]}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.668542675794547*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Electronics", "Section",
 CellChangeTimes->{{3.6685427302710514`*^9, 3.6685427334704933`*^9}}],

Cell["\<\
I' ll come back to this after hearing the in class explanation. It is \
probably useful, so I' m sorry I didn't solve it.\
\>", "Text",
 CellChangeTimes->{{3.668733543895639*^9, 3.668733579407439*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Types of Solutions", "Section",
 CellChangeTimes->{{3.668623991442099*^9, 3.6686240114663982`*^9}}],

Cell[CellGroupData[{

Cell["Solving with Elimination", "Subsection",
 CellChangeTimes->{{3.668624012803542*^9, 3.668624018784439*^9}}],

Cell[TextData[{
 "This function carries out rotely the elimination algorithm for 2-d equation \
solvers given. Notice that I use x and y instead of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "1"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "2"], TraditionalForm]]],
 ", simply for brevity."
}], "Text",
 CellChangeTimes->{{3.668624410443821*^9, 3.668624465634655*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "@", "elim2"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"elim2", "[", 
   RowBox[{"eq1_", ",", "eq2_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"soleq1", ",", "soleq2", ",", "xval", ",", "yval"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"soleq1", "=", 
      RowBox[{
       RowBox[{"Solve", "[", 
        RowBox[{"eq1", ",", 
         RowBox[{"{", "x", "}"}]}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soleq2", "=", 
      RowBox[{"eq2", "/.", "soleq1"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"yval", "=", 
      RowBox[{"y", "/.", 
       RowBox[{
        RowBox[{"Solve", "[", 
         RowBox[{"soleq2", ",", "y"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"xval", "=", 
      RowBox[{
       RowBox[{"soleq1", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "2"}], "]"}], "]"}], "/.", 
       RowBox[{"y", "\[Rule]", "yval"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"xval", ",", "yval"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.6686240428949013`*^9, 3.668624120543398*^9}, {
  3.668624152796557*^9, 3.6686242816072073`*^9}, {3.668624324225312*^9, 
  3.668624324302581*^9}}],

Cell[TextData[{
 "Note that the solution given in the BB is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {"1"},
      {
       RowBox[{"3", "/", "2"}]}
     }], ")"}], TraditionalForm]]],
 ", an erroneous typo."
}], "Text",
 CellChangeTimes->{{3.668624362880846*^9, 3.6686244044521017`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"elim2", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"2", "x"}], "+", 
      RowBox[{"3", "y"}]}], "==", "6"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"4", "x"}], "+", 
      RowBox[{"9", "y"}]}], "\[Equal]", "15"}]}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.668624285874209*^9, 3.66862431798251*^9}, {
  3.668624353530553*^9, 3.668624355324834*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       FractionBox["3", "2"]},
      {"1"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668624318778343*^9, 3.668624355670233*^9}}]
}, Open  ]],

Cell["This equation has infinitely many solutions:", "Text",
 CellChangeTimes->{{3.6686244802846413`*^9, 3.668624494331746*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"elim2", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "+", 
      RowBox[{"2", "y"}]}], "\[Equal]", "1"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"2", "x"}], "+", 
      RowBox[{"4", "y"}]}], "\[Equal]", "2"}]}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.668624285874209*^9, 3.66862431798251*^9}, {
  3.668624353530553*^9, 3.668624355324834*^9}, {3.668624503099185*^9, 
  3.668624513620356*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{"1", "-", 
        RowBox[{"2", " ", "y"}]}]},
      {"y"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.6686245141744623`*^9}]
}, Open  ]],

Cell["\<\
The result here states that as long as y==y (trivially true) and x==1-2y, the \
equations are satisfied.\
\>", "Text",
 CellChangeTimes->{{3.668624529647354*^9, 3.668624554201182*^9}}],

Cell["This equation has no solutions.", "Text",
 CellChangeTimes->{{3.668624557484556*^9, 3.668624565230907*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"elim2", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "+", 
      RowBox[{"2", "y"}]}], "\[Equal]", "1"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"2", "x"}], "+", 
      RowBox[{"4", "y"}]}], "\[Equal]", "1"}]}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.668624285874209*^9, 3.66862431798251*^9}, {
   3.668624353530553*^9, 3.668624355324834*^9}, {3.668624503099185*^9, 
   3.668624513620356*^9}, 3.668624577876959*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "partw"}], "MessageName"], ":", 
  " ", "\<\"Part \[NoBreak]\\!\\(\\*RowBox[{\\\"1\\\"}]\\)\[NoBreak] of \
\[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \\\"}\\\"}]\\)\[NoBreak] does not \
exist. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/partw\\\", ButtonNote -> \
\\\"Part::partw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.668624578413025*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", \
\\\"}\\\"}], \\\"\[LeftDoubleBracket]\\\", \\\"1\\\", \\\"\
\[RightDoubleBracket]\\\"}], \\\"}\\\"}]\\)\[NoBreak] is neither a list of \
replacement rules nor a valid dispatch table, and so cannot be used for \
replacing. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/ReplaceAll/reps\\\
\", ButtonNote -> \\\"ReplaceAll::reps\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.668624578451686*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{"1", "-", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"y", "/.", "\[VeryThinSpace]", 
           RowBox[{
            RowBox[{"{", "}"}], "\[LeftDoubleBracket]", "1", 
            "\[RightDoubleBracket]"}]}], ")"}]}]}]},
      {
       RowBox[{"y", "/.", "\[VeryThinSpace]", 
        RowBox[{
         RowBox[{"{", "}"}], "\[LeftDoubleBracket]", "1", 
         "\[RightDoubleBracket]"}]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.668624578479095*^9}]
}, Open  ]],

Cell["\<\
As expected, warnings are thrown and a nonsensical result is returned. In \
particular, the first solution to an equation with no solutions doesn\
\[CloseCurlyQuote]t exist. I\[CloseCurlyQuote]d like the error to be more \
intuitive, but this works.\
\>", "Text",
 CellChangeTimes->{{3.668624594411192*^9, 3.668624642203455*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving for h, k", "Subsection",
 CellChangeTimes->{{3.668624656920405*^9, 3.668624661122345*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"elim2", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "+", 
      RowBox[{"h", " ", "y"}]}], "\[Equal]", "1"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"2", "x"}], "+", 
      RowBox[{"3", "y"}]}], "\[Equal]", "k"}]}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.668624665662016*^9, 3.668624686050783*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{"1", "-", 
        FractionBox[
         RowBox[{"h", " ", 
          RowBox[{"(", 
           RowBox[{"2", "-", "k"}], ")"}]}], 
         RowBox[{
          RowBox[{"-", "3"}], "+", 
          RowBox[{"2", " ", "h"}]}]]}]},
      {
       FractionBox[
        RowBox[{"2", "-", "k"}], 
        RowBox[{
         RowBox[{"-", "3"}], "+", 
         RowBox[{"2", " ", "h"}]}]]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668624680583694*^9, 3.6686246863128233`*^9}}]
}, Open  ]],

Cell[TextData[{
 "Interpreting this result is a little hoakey. In particular, it is clear \
that ",
 StyleBox["something ",
  FontSlant->"Italic"],
 "interesting happens when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "=", 
    FractionBox["3", "2"]}], TraditionalForm]]],
 ", but it takes some thought to realize that the result is no solution \
because ",
 Cell[BoxData[
  FormBox[
   FractionBox["n", "0"], TraditionalForm]]],
 " is undefined for nonzero ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 ". On the other hand, if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "=", 
    RowBox[{
     RowBox[{
      FractionBox["3", "2"], "&&", "k"}], "=", "2"}]}], TraditionalForm]]],
 ", then the y value is ",
 Cell[BoxData[
  FormBox[
   FractionBox["0", "0"], TraditionalForm]]],
 ", which allows for infinitely many solutions."
}], "Text",
 CellChangeTimes->{{3.668624767091155*^9, 3.668624943498864*^9}}],

Cell["\<\
Amazingly, this code was written once, then applied to all of the cases \
without needing to be tested, altered, or generalized. I think that\
\[CloseCurlyQuote]s interesting.\
\>", "Text",
 CellChangeTimes->{{3.668624945406567*^9, 3.6686250032631893`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Three variables", "Subsection",
 CellChangeTimes->{{3.668625104691861*^9, 3.668625107322638*^9}}],

Cell["\<\
This code is a pretty simple extension of the stuff above, but demonstrates \
the added complexity from solving higher-order equations using elimination.\
\>", "Text",
 CellChangeTimes->{{3.668625311486361*^9, 3.668625342023047*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "@", "elim3"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"elim3", "[", 
   RowBox[{"eq1_", ",", "eq2_", ",", "eq3_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"soleq1", "=", 
      RowBox[{
       RowBox[{"Solve", "[", 
        RowBox[{"eq1", ",", "x"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soleq2", "=", 
      RowBox[{
       RowBox[{"Solve", "[", 
        RowBox[{
         RowBox[{"eq2", "/.", "soleq1"}], ",", "y"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"zval", "=", 
      RowBox[{"z", "/.", 
       RowBox[{
        RowBox[{"Solve", "[", 
         RowBox[{
          RowBox[{"eq3", "/.", 
           RowBox[{"Join", "[", 
            RowBox[{"soleq1", ",", "soleq2"}], "]"}]}], ",", "z"}], "]"}], 
        "[", 
        RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"yval", "=", 
      RowBox[{
       RowBox[{"soleq2", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "2"}], "]"}], "]"}], "/.", 
       RowBox[{"z", "\[Rule]", "zval"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"xval", "=", 
      RowBox[{
       RowBox[{"soleq1", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "2"}], "]"}], "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"z", "\[Rule]", "zval"}], ",", 
         RowBox[{"y", "\[Rule]", "yval"}]}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"xval", ",", "yval", ",", "zval"}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.6686240428949013`*^9, 3.668624120543398*^9}, {
  3.668624152796557*^9, 3.6686242816072073`*^9}, {3.668624324225312*^9, 
  3.668624324302581*^9}, {3.6686251377734528`*^9, 3.668625300801696*^9}, {
  3.668625387749517*^9, 3.668625438067882*^9}, {3.668625648427767*^9, 
  3.668625681062763*^9}, {3.6686257123746634`*^9, 3.6686257145507507`*^9}}],

Cell["\<\
When I fed in the equations in the given order, this code broke. I suspect \
that this is the primary reason elimination isn\[CloseCurlyQuote]t a good way \
for computers to solve these things.\
\>", "Text",
 CellChangeTimes->{{3.66862541817595*^9, 3.668625481839571*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"elim3", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "+", "y", "+", "z"}], "\[Equal]", "6"}], ",", 
   RowBox[{
    RowBox[{"x", "-", 
     RowBox[{"2", "z"}]}], "\[Equal]", "4"}], ",", 
   RowBox[{
    RowBox[{"y", "+", "z"}], "\[Equal]", "4"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.668625305429274*^9, 3.668625307103754*^9}, {
   3.668625347891571*^9, 3.668625379263311*^9}, {3.668625441866588*^9, 
   3.668625443711114*^9}, 3.668626683521429*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "5", ",", 
   RowBox[{"-", "1"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.668625379990736*^9, 3.668625409778623*^9}, 
   3.668625444102312*^9, 3.668626684055821*^9}]
}, Open  ]],

Cell["Result: 1 solution", "Text",
 CellChangeTimes->{{3.668625492121221*^9, 3.6686255057557793`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"elim3", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "+", "y", "+", "z"}], "\[Equal]", 
    RowBox[{"-", "6"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"2", "x"}], "+", "y", "-", "z"}], "\[Equal]", "18"}], ",", 
   RowBox[{
    RowBox[{"y", "-", 
     RowBox[{"2", "z"}]}], "\[Equal]", "4"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.668625305429274*^9, 3.668625307103754*^9}, {
   3.668625347891571*^9, 3.668625379263311*^9}, {3.668625441866588*^9, 
   3.668625443711114*^9}, {3.668625522031783*^9, 3.668625528759198*^9}, 
   3.6686265013243647`*^9, {3.668626675761087*^9, 3.6686266869137287`*^9}, {
   3.668626730059746*^9, 3.668626733791236*^9}, 3.6686271327257643`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["52", "5"], ",", 
   RowBox[{"-", 
    FractionBox["48", "5"]}], ",", 
   RowBox[{"-", 
    FractionBox["34", "5"]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6686255291402063`*^9, 3.668626509576003*^9, {3.668626676547688*^9, 
   3.66862668737256*^9}, {3.668626727699792*^9, 3.6686267341728497`*^9}, 
   3.668626966142527*^9, {3.668627128822631*^9, 3.668627142017214*^9}}]
}, Open  ]],

Cell["Result : 1 solution", "Text",
 CellChangeTimes->{{3.668625537537077*^9, 3.668625546255032*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"elim3", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"2", "x"}], "+", "y", "-", "z"}], "\[Equal]", "10"}], ",", 
   RowBox[{
    RowBox[{"x", "+", "y", "+", "z"}], "\[Equal]", "6"}], ",", 
   RowBox[{
    RowBox[{"y", "+", "z"}], "\[Equal]", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.668625305429274*^9, 3.668625307103754*^9}, {
  3.668625347891571*^9, 3.668625379263311*^9}, {3.668625441866588*^9, 
  3.668625443711114*^9}, {3.6686255570011168`*^9, 3.668625558602304*^9}, {
  3.6686255908363047`*^9, 3.668625592700678*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "2", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.668625558976232*^9, 3.66862559328539*^9, 
  3.668626511451281*^9}]
}, Open  ]],

Cell["Result : 1 solution", "Text",
 CellChangeTimes->{{3.668625537537077*^9, 3.668625546255032*^9}}],

Cell[TextData[{
 "Ummm. Those results are ",
 StyleBox["not right",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ". I think I\[CloseCurlyQuote]ve hit the limits of reasonable \
programmability of elimination, and while I could certainly work it out by \
hand, cursory visual inspection reveals the answers are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"One", ",", " "}]}], TraditionalForm]]],
 "none, many). I\[CloseCurlyQuote]ll come back and fix this if I have time.\n\
Lesson learned: Don\[CloseCurlyQuote]t do elimination by computer!"
}], "Text",
 CellChangeTimes->{{3.668626414836218*^9, 3.668626465420478*^9}, {
  3.668626612317173*^9, 3.668626612756908*^9}, {3.668627113882958*^9, 
  3.6686271140500193`*^9}, {3.668627148340852*^9, 3.6686271505118933`*^9}, {
  3.6686272126051407`*^9, 3.668627240773067*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gauss-Jordan Elimination", "Section",
 CellChangeTimes->{{3.668627249778219*^9, 3.668627255356688*^9}, 
   3.668628230654607*^9}],

Cell[TextData[{
 "I\[CloseCurlyQuote]ve done the by-hand part of this ",
 StyleBox["far too many times",
  FontSlant->"Italic"],
 " before for my Linear Algebra class, and that was valuable. Doing it again \
now wouldn\[CloseCurlyQuote]t be, so I\[CloseCurlyQuote]m not going to."
}], "Text",
 CellChangeTimes->{{3.668628263245524*^9, 3.6686283065871553`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"aug", "=", 
   RowBox[{"(", GridBox[{
      {"1", "1", "1", "6"},
      {"0", "1", "1", "2"},
      {"1", "0", 
       RowBox[{"-", "2"}], "4"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RowReduce", "[", "aug", "]"}], "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.668627825747364*^9, 3.6686278890964518`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0", "4"},
     {"0", "1", "0", "2"},
     {"0", "0", "1", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.668627889820806*^9}]
}, Open  ]],

Cell["Result: Single solution", "Text",
 CellChangeTimes->{{3.668627958342547*^9, 3.668627963478559*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"aug", "=", 
   RowBox[{"(", GridBox[{
      {"1", "1", "1", 
       RowBox[{"-", "6"}]},
      {"2", "1", 
       RowBox[{"-", "1"}], "18"},
      {"1", "0", 
       RowBox[{"-", "2"}], "4"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RowReduce", "[", "aug", "]"}], "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.668627825747364*^9, 3.668627911518031*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", 
      RowBox[{"-", "2"}], "0"},
     {"0", "1", "3", "0"},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.668627916023554*^9}]
}, Open  ]],

Cell["Result: No solutions", "Text",
 CellChangeTimes->{{3.668627965986586*^9, 3.668627972302319*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"aug", "=", 
   RowBox[{"(", GridBox[{
      {"1", "1", "1", "6"},
      {"2", "1", 
       RowBox[{"-", "1"}], "10"},
      {"1", "0", 
       RowBox[{"-", "2"}], "4"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RowReduce", "[", "aug", "]"}], "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.668627825747364*^9, 3.6686278890964518`*^9}, {
  3.668627941237083*^9, 3.668627946236767*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", 
      RowBox[{"-", "2"}], "4"},
     {"0", "1", "3", "2"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.668627951162058*^9}]
}, Open  ]],

Cell["Result: Infinitely many solutions", "Text",
 CellChangeTimes->{{3.668627975489189*^9, 3.6686279830435667`*^9}}],

Cell["\<\
I realize that this is the fuller form, but don\[CloseCurlyQuote]t see much \
point in stopping before achieving  the leading 1\[CloseCurlyQuote]s \
coefficient.\
\>", "Text",
 CellChangeTimes->{{3.668628173053804*^9, 3.6686281967523527`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["LU Decomposition", "Section",
 CellChangeTimes->{{3.668630832940793*^9, 3.6686308371326733`*^9}}],

Cell["\<\
The LUDecomposition command returns the results in an annoying flattened \
format. This fixes that. Warning: for convenience, it drops the permutation \
matrix, causing potentially incorrect results.\
\>", "Text",
 CellChangeTimes->{{3.668631856292357*^9, 3.6686319216167917`*^9}, {
  3.66871662579937*^9, 3.668716643655986*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "[", "LU", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LU", "[", "mat_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"lu", ",", "p", ",", "c", ",", "l", ",", "u"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"lu", ",", "p", ",", "c"}], "}"}], "=", 
      RowBox[{"LUDecomposition", "[", "mat", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"l", "=", 
      RowBox[{
       RowBox[{"lu", " ", 
        RowBox[{"SparseArray", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i_", ",", "j_"}], "}"}], "/;", 
            RowBox[{"j", "<", "i"}]}], "\[Rule]", "1"}], ",", 
          RowBox[{"Dimensions", "@", "mat"}]}], "]"}]}], "+", 
       RowBox[{"IdentityMatrix", "[", 
        RowBox[{"Length", "@", "mat"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"u", "=", 
      RowBox[{"UpperTriangularize", "[", "lu", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"l", ",", "u"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.668630840569675*^9, 3.668630932729393*^9}, {
  3.668630963910878*^9, 3.668630967268003*^9}, {3.6686310066125793`*^9, 
  3.668631009270912*^9}, {3.6686311038584347`*^9, 3.6686311205952787`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"(", GridBox[{
      {"1", "1", "1"},
      {"0", "1", "1"},
      {"1", "0", 
       RowBox[{"-", "2"}]}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<L\>\"", ",", "\"\<U\>\""}], "}"}], ",", 
    RowBox[{"MatrixForm", "/@", 
     RowBox[{"LU", "[", "mat", "]"}]}]}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.668627825747364*^9, 3.6686278890964518`*^9}, {
   3.668631515600326*^9, 3.6686315158515873`*^9}, 3.668631697121252*^9, {
   3.668631936303358*^9, 3.668631976908122*^9}, {3.668632428024108*^9, 
   3.668632463664426*^9}, {3.6686330688570232`*^9, 3.6686330733659143`*^9}, {
   3.668701162950591*^9, 3.668701170780175*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"L\"\>", "\<\"U\"\>"},
    {
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0"},
         {"0", "1", "0"},
         {"1", 
          RowBox[{"-", "1"}], "1"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "1", "1"},
         {"0", "1", "1"},
         {"0", "0", 
          RowBox[{"-", "2"}]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.668631965749035*^9, 3.668631977153056*^9}, {
   3.6686324257837753`*^9, 3.6686324642344112`*^9}, {3.668633070159313*^9, 
   3.668633074052546*^9}, 3.668701176939168*^9}]
}, Open  ]],

Cell["My manual calculation agrees.", "Text",
 CellChangeTimes->{{3.668627958342547*^9, 3.668627963478559*^9}, 
   3.668631692820187*^9, {3.6687009189212933`*^9, 3.668700924938816*^9}, {
   3.6687009709001083`*^9, 3.6687009718869267`*^9}}],

Cell["\<\
This next problem encapsulates both the second and third examples (they\
\[CloseCurlyQuote]re identical).\
\>", "Text",
 CellChangeTimes->{{3.668700926797297*^9, 3.668700934807287*^9}, {
  3.6687009754152193`*^9, 3.668700984959094*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"(", GridBox[{
      {"1", "1", "1"},
      {"2", "1", 
       RowBox[{"-", "1"}]},
      {"1", "0", 
       RowBox[{"-", "2"}]}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<L\>\"", ",", "\"\<U\>\""}], "}"}], ",", 
    RowBox[{"MatrixForm", "/@", 
     RowBox[{"LU", "[", "mat", "]"}]}]}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.668627825747364*^9, 3.668627911518031*^9}, {
   3.668631512981739*^9, 3.6686315133333893`*^9}, 3.668631698946868*^9, {
   3.6686319885703583`*^9, 3.6686319889067574`*^9}, {3.668633052728758*^9, 
   3.668633077879966*^9}, {3.6687011719112387`*^9, 3.66870117324292*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LUDecomposition", "::", "sing"}], "MessageName"], ":", 
  " ", "\<\"Matrix \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"1\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\
\"2\\\", \\\",\\\", \\\"1\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}]}], \
\\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \
\\\"0\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"2\\\"}]}], \\\"}\\\"}]}], \
\\\"}\\\"}]\\)\[NoBreak] is singular. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\
\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/sing\\\", ButtonNote -> \
\\\"LUDecomposition::sing\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.668631989345222*^9, 3.668633078189638*^9, 
  3.668701179564392*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"L\"\>", "\<\"U\"\>"},
    {
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0"},
         {"2", "1", "0"},
         {"1", "1", "1"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "1", "1"},
         {"0", 
          RowBox[{"-", "1"}], 
          RowBox[{"-", "3"}]},
         {"0", "0", "0"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.6686319893823633`*^9, 3.668633078230995*^9, 
  3.6687011796020107`*^9}]
}, Open  ]],

Cell["\<\
My manual calculation agrees. The singular nature of the matrix does not \
prevent successful calculation.\
\>", "Text",
 CellChangeTimes->{{3.668627965986586*^9, 3.668627972302319*^9}, 
   3.668631695398657*^9, {3.668700989823378*^9, 3.668700993399398*^9}, {
   3.668701100742881*^9, 3.668701102043826*^9}, {3.668701182652211*^9, 
   3.668701195018544*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Determinant", "Section",
 CellChangeTimes->{{3.66870114983659*^9, 3.668701151645933*^9}}],

Cell[CellGroupData[{

Cell["1", "Subsection",
 CellChangeTimes->{3.6687012368797483`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"(", GridBox[{
      {"1", "1", "1"},
      {"0", "1", "1"},
      {"1", "0", 
       RowBox[{"-", "2"}]}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<L\>\"", ",", "\"\<U\>\""}], "}"}], ",", 
    RowBox[{"MatrixForm", "/@", 
     RowBox[{"LU", "[", "mat", "]"}]}]}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<Manual result: -2\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Det", "[", "mat", "]"}]}], "Input",
 CellChangeTimes->{{3.668627825747364*^9, 3.6686278890964518`*^9}, {
   3.668631515600326*^9, 3.6686315158515873`*^9}, 3.668631697121252*^9, {
   3.668631936303358*^9, 3.668631976908122*^9}, {3.668632428024108*^9, 
   3.668632463664426*^9}, {3.6686330688570232`*^9, 3.6686330733659143`*^9}, {
   3.668701162950591*^9, 3.668701170780175*^9}, {3.668701248908595*^9, 
   3.66870126631635*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"L\"\>", "\<\"U\"\>"},
    {
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0"},
         {"0", "1", "0"},
         {"1", 
          RowBox[{"-", "1"}], "1"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "1", "1"},
         {"0", "1", "1"},
         {"0", "0", 
          RowBox[{"-", "2"}]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.668631965749035*^9, 3.668631977153056*^9}, {
   3.6686324257837753`*^9, 3.6686324642344112`*^9}, {3.668633070159313*^9, 
   3.668633074052546*^9}, 3.668701176939168*^9, 3.668701266759602*^9}],

Cell[BoxData["\<\"Manual result: -2\"\>"], "Print",
 CellChangeTimes->{3.668701266826324*^9}],

Cell[BoxData[
 RowBox[{"-", "2"}]], "Output",
 CellChangeTimes->{{3.668631965749035*^9, 3.668631977153056*^9}, {
   3.6686324257837753`*^9, 3.6686324642344112`*^9}, {3.668633070159313*^9, 
   3.668633074052546*^9}, 3.668701176939168*^9, 3.6687012668650293`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2/3", "Subsection",
 CellChangeTimes->{{3.6687012402958603`*^9, 3.66870124147989*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"(", GridBox[{
      {"1", "1", "1"},
      {"2", "1", 
       RowBox[{"-", "1"}]},
      {"1", "0", 
       RowBox[{"-", "2"}]}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<L\>\"", ",", "\"\<U\>\""}], "}"}], ",", 
    RowBox[{"MatrixForm", "/@", 
     RowBox[{"LU", "[", "mat", "]"}]}]}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<Manual result: 0\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Det", "[", "mat", "]"}]}], "Input",
 CellChangeTimes->{{3.668627825747364*^9, 3.668627911518031*^9}, {
   3.668631512981739*^9, 3.6686315133333893`*^9}, 3.668631698946868*^9, {
   3.6686319885703583`*^9, 3.6686319889067574`*^9}, {3.668633052728758*^9, 
   3.668633077879966*^9}, {3.6687011719112387`*^9, 3.66870117324292*^9}, {
   3.6687012738302298`*^9, 3.668701277998208*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LUDecomposition", "::", "sing"}], "MessageName"], ":", 
  " ", "\<\"Matrix \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"1\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\
\"2\\\", \\\",\\\", \\\"1\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}]}], \
\\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \
\\\"0\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"2\\\"}]}], \\\"}\\\"}]}], \
\\\"}\\\"}]\\)\[NoBreak] is singular. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\
\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/sing\\\", ButtonNote -> \
\\\"LUDecomposition::sing\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.668631989345222*^9, 3.668633078189638*^9, 
  3.668701179564392*^9, 3.668701278757875*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"L\"\>", "\<\"U\"\>"},
    {
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0"},
         {"2", "1", "0"},
         {"1", "1", "1"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "1", "1"},
         {"0", 
          RowBox[{"-", "1"}], 
          RowBox[{"-", "3"}]},
         {"0", "0", "0"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.6686319893823633`*^9, 3.668633078230995*^9, 
  3.6687011796020107`*^9, 3.668701278794313*^9}],

Cell[BoxData["\<\"Manual result: 0\"\>"], "Print",
 CellChangeTimes->{3.66870127882682*^9}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.6686319893823633`*^9, 3.668633078230995*^9, 
  3.6687011796020107`*^9, 3.668701278861883*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inverse", "Section",
 CellChangeTimes->{{3.66870114983659*^9, 3.668701151645933*^9}, {
  3.668701379581039*^9, 3.6687013803994923`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "@", "LUinverse"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LUinverse", "[", 
   RowBox[{"l_", ",", "u_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"inv", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"0", ",", 
        RowBox[{"Dimensions", "@", "l"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"intermediate", "=", 
         RowBox[{"LinearSolve", "[", 
          RowBox[{"l", ",", 
           RowBox[{"UnitVector", "[", 
            RowBox[{
             RowBox[{"Length", "@", "l"}], ",", "i"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"inv", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "i"}], "]"}], "]"}], "=", 
         RowBox[{"LinearSolve", "[", 
          RowBox[{"u", ",", "intermediate"}], "]"}]}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "@", "l"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "inv"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.668701661670899*^9, 3.66870173977562*^9}}],

Cell[CellGroupData[{

Cell["1", "Subsection",
 CellChangeTimes->{3.6687012368797483`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"(", GridBox[{
      {"1", "1", "1"},
      {"0", "1", "1"},
      {"1", "0", 
       RowBox[{"-", "2"}]}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"l", ",", "u"}], "}"}], "=", 
   RowBox[{"LU", "[", "mat", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<L\>\"", ",", "\"\<U\>\""}], "}"}], ",", 
    RowBox[{"MatrixForm", "/@", 
     RowBox[{"{", 
      RowBox[{"l", ",", "u"}], "}"}]}]}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LUinverse", "[", 
   RowBox[{"l", ",", "u"}], "]"}], "//", 
  "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Inverse", "[", "mat", "]"}], "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.668627825747364*^9, 3.6686278890964518`*^9}, {
   3.668631515600326*^9, 3.6686315158515873`*^9}, 3.668631697121252*^9, {
   3.668631936303358*^9, 3.668631976908122*^9}, {3.668632428024108*^9, 
   3.668632463664426*^9}, {3.6686330688570232`*^9, 3.6686330733659143`*^9}, {
   3.668701162950591*^9, 3.668701170780175*^9}, {3.668701248908595*^9, 
   3.66870126631635*^9}, {3.668701421597601*^9, 3.66870153402392*^9}, {
   3.668701565702674*^9, 3.668701649048635*^9}, {3.668701747631295*^9, 
   3.66870175511915*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"L\"\>", "\<\"U\"\>"},
    {
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0"},
         {"0", "1", "0"},
         {"1", 
          RowBox[{"-", "1"}], "1"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "1", "1"},
         {"0", "1", "1"},
         {"0", "0", 
          RowBox[{"-", "2"}]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.668631965749035*^9, 3.668631977153056*^9}, {
   3.6686324257837753`*^9, 3.6686324642344112`*^9}, {3.668633070159313*^9, 
   3.668633074052546*^9}, 3.668701176939168*^9, 3.668701266759602*^9, 
   3.668701437376547*^9, 3.668701493467544*^9, 3.6687016099030724`*^9, {
   3.668701641367012*^9, 3.6687016496224327`*^9}, 3.66870175576119*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", 
      RowBox[{"-", "1"}], "0"},
     {
      RowBox[{"-", 
       FractionBox["1", "2"]}], 
      FractionBox["3", "2"], 
      FractionBox["1", "2"]},
     {
      FractionBox["1", "2"], 
      RowBox[{"-", 
       FractionBox["1", "2"]}], 
      RowBox[{"-", 
       FractionBox["1", "2"]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668631965749035*^9, 3.668631977153056*^9}, {
   3.6686324257837753`*^9, 3.6686324642344112`*^9}, {3.668633070159313*^9, 
   3.668633074052546*^9}, 3.668701176939168*^9, 3.668701266759602*^9, 
   3.668701437376547*^9, 3.668701493467544*^9, 3.6687016099030724`*^9, {
   3.668701641367012*^9, 3.6687016496224327`*^9}, 3.6687017557996407`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", 
      RowBox[{"-", "1"}], "0"},
     {
      RowBox[{"-", 
       FractionBox["1", "2"]}], 
      FractionBox["3", "2"], 
      FractionBox["1", "2"]},
     {
      FractionBox["1", "2"], 
      RowBox[{"-", 
       FractionBox["1", "2"]}], 
      RowBox[{"-", 
       FractionBox["1", "2"]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668631965749035*^9, 3.668631977153056*^9}, {
   3.6686324257837753`*^9, 3.6686324642344112`*^9}, {3.668633070159313*^9, 
   3.668633074052546*^9}, 3.668701176939168*^9, 3.668701266759602*^9, 
   3.668701437376547*^9, 3.668701493467544*^9, 3.6687016099030724`*^9, {
   3.668701641367012*^9, 3.6687016496224327`*^9}, 3.668701755838869*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2-3", "Subsection",
 CellChangeTimes->{{3.6687012402958603`*^9, 3.66870124147989*^9}, 
   3.668701387227293*^9}],

Cell["\<\
Because this equation has potentially no solutions, an inverse matrix should \
not be findable. Let\[CloseCurlyQuote]s try anyway.\
\>", "Text",
 CellChangeTimes->{{3.668701797052341*^9, 3.668701816999971*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"(", GridBox[{
      {"1", "1", "1"},
      {"2", "1", 
       RowBox[{"-", "1"}]},
      {"1", "0", 
       RowBox[{"-", "2"}]}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"l", ",", "u"}], "}"}], "=", 
   RowBox[{"LU", "[", "mat", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<L\>\"", ",", "\"\<U\>\""}], "}"}], ",", 
    RowBox[{"MatrixForm", "/@", 
     RowBox[{"{", 
      RowBox[{"l", ",", "u"}], "}"}]}]}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LUinverse", "[", 
   RowBox[{"l", ",", "u"}], "]"}], "//", 
  "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Inverse", "[", "mat", "]"}], "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.668627825747364*^9, 3.668627911518031*^9}, {
   3.668631512981739*^9, 3.6686315133333893`*^9}, 3.668631698946868*^9, {
   3.6686319885703583`*^9, 3.6686319889067574`*^9}, {3.668633052728758*^9, 
   3.668633077879966*^9}, {3.6687011719112387`*^9, 3.66870117324292*^9}, {
   3.6687012738302298`*^9, 3.668701277998208*^9}, 3.668701775195085*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LUDecomposition", "::", "sing"}], "MessageName"], ":", 
  " ", "\<\"Matrix \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"1\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\
\"2\\\", \\\",\\\", \\\"1\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}]}], \
\\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \
\\\"0\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"2\\\"}]}], \\\"}\\\"}]}], \
\\\"}\\\"}]\\)\[NoBreak] is singular. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\
\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/sing\\\", ButtonNote -> \
\\\"LUDecomposition::sing\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.668631989345222*^9, 3.668633078189638*^9, 
  3.668701179564392*^9, 3.668701278757875*^9, 3.668701776569874*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"L\"\>", "\<\"U\"\>"},
    {
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0"},
         {"2", "1", "0"},
         {"1", "1", "1"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "1", "1"},
         {"0", 
          RowBox[{"-", "1"}], 
          RowBox[{"-", "3"}]},
         {"0", "0", "0"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.6686319893823633`*^9, 3.668633078230995*^9, 
  3.6687011796020107`*^9, 3.668701278794313*^9, 3.668701776608942*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LinearSolve", "::", "nosol"}], "MessageName"], ":", 
  " ", "\<\"Linear equation encountered that has no solution. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/LinearSolve/nosol\\\", \
ButtonNote -> \\\"LinearSolve::nosol\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.668631989345222*^9, 3.668633078189638*^9, 
  3.668701179564392*^9, 3.668701278757875*^9, 3.66870177665526*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LinearSolve", "::", "nosol"}], "MessageName"], ":", 
  " ", "\<\"Linear equation encountered that has no solution. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/LinearSolve/nosol\\\", \
ButtonNote -> \\\"LinearSolve::nosol\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.668631989345222*^9, 3.668633078189638*^9, 
  3.668701179564392*^9, 3.668701278757875*^9, 3.668701776692151*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LinearSolve", "::", "nosol"}], "MessageName"], ":", 
  " ", "\<\"Linear equation encountered that has no solution. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/LinearSolve/nosol\\\", \
ButtonNote -> \\\"LinearSolve::nosol\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.668631989345222*^9, 3.668633078189638*^9, 
  3.668701179564392*^9, 3.668701278757875*^9, 3.668701776734269*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], ":", 
  " ", "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[RowBox[{\\\"LinearSolve\\\", \\\"::\\\", \
\\\"nosol\\\"}], \\\"MessageName\\\"]\\)\[NoBreak] will be suppressed during \
this calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.668631989345222*^9, 3.668633078189638*^9, 
  3.668701179564392*^9, 3.668701278757875*^9, 3.668701776772891*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"LinearSolve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "3"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "2"}], ",", "1"}], "}"}]}], "]"}], 
      RowBox[{"LinearSolve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "3"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], "]"}], 
      RowBox[{"LinearSolve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "3"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "]"}]},
     {
      RowBox[{"LinearSolve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "3"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "2"}], ",", "1"}], "}"}]}], "]"}], 
      RowBox[{"LinearSolve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "3"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], "]"}], 
      RowBox[{"LinearSolve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "3"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "]"}]},
     {
      RowBox[{"LinearSolve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "3"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "2"}], ",", "1"}], "}"}]}], "]"}], 
      RowBox[{"LinearSolve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "3"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], "]"}], 
      RowBox[{"LinearSolve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "3"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "]"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.6686319893823633`*^9, 3.668633078230995*^9, 
  3.6687011796020107`*^9, 3.668701278794313*^9, 3.668701776809531*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Inverse", "::", "sing"}], "MessageName"], ":", 
  " ", "\<\"Matrix \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"1\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\
\"2\\\", \\\",\\\", \\\"1\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}]}], \
\\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \
\\\"0\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"2\\\"}]}], \\\"}\\\"}]}], \
\\\"}\\\"}]\\)\[NoBreak] is singular. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\
\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/sing\\\", ButtonNote -> \
\\\"Inverse::sing\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.668631989345222*^9, 3.668633078189638*^9, 
  3.668701179564392*^9, 3.668701278757875*^9, 3.668701776871526*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"Inverse", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", 
       RowBox[{"-", "2"}]}], "}"}]}], "}"}], "]"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.6686319893823633`*^9, 3.668633078230995*^9, 
  3.6687011796020107`*^9, 3.668701278794313*^9, 3.668701776916103*^9}]
}, Open  ]],

Cell[TextData[{
 "As expected, neither method works. As always, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is throwing lots of errors, and the results are strictly speaking correct, \
but not useful."
}], "Text",
 CellChangeTimes->{{3.668701820325481*^9, 3.66870188776654*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Building Bridges", "Section",
 CellChangeTimes->{{3.66870201711454*^9, 3.6687020195518312`*^9}}],

Cell[CellGroupData[{

Cell["Triangle Truss", "Subsection",
 CellChangeTimes->{{3.668702021120636*^9, 3.6687020236565113`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"(", GridBox[{
      {
       RowBox[{"-", 
        RowBox[{"Sin", "[", 
         RowBox[{"30", " ", "Degree"}], "]"}]}], "0", 
       RowBox[{"-", 
        RowBox[{"Sin", "[", 
         RowBox[{"60", " ", "Degree"}], "]"}]}], "0", "0", "0"},
      {
       RowBox[{"-", 
        RowBox[{"Cos", "[", 
         RowBox[{"30", " ", "Degree"}], "]"}]}], "0", 
       RowBox[{"Cos", "[", 
        RowBox[{"60", " ", "Degree"}], "]"}], "0", "0", "0"},
      {
       RowBox[{"Cos", "[", 
        RowBox[{"30", " ", "Degree"}], "]"}], "1", "0", "1", "0", "0"},
      {
       RowBox[{"Sin", "[", 
        RowBox[{"30", " ", "Degree"}], "]"}], "0", "0", "0", "1", "0"},
      {"0", 
       RowBox[{"-", "1"}], 
       RowBox[{"-", 
        RowBox[{"Cos", "[", 
         RowBox[{"60", " ", "Degree"}], "]"}]}], "0", "0", "0"},
      {"0", "0", 
       RowBox[{"Sin", "[", 
        RowBox[{"60", " ", "Degree"}], "]"}], "0", "0", "1"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"Transpose", "@", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"1000", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
      "}"}], "}"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.668702272782608*^9, 3.668702409111197*^9}, {
  3.6687024919005632`*^9, 3.668702517258933*^9}}],

Cell[CellGroupData[{

Cell["10.", "Subsubsection",
 CellChangeTimes->{{3.668702026145329*^9, 3.668702028076092*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"Quiet", "[", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"Inverse", "[", "a", "]"}], "]"}], "===", "Inverse"}], "]"}], 
   ",", "\"\<Indeterminate\>\"", ",", "\"\<Determinate\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.668702426729653*^9, 3.6687024603937063`*^9}, {
  3.668703908458234*^9, 3.668703931384507*^9}, {3.66870396469836*^9, 
  3.6687039737662363`*^9}, {3.668704043865979*^9, 3.668704061597528*^9}, {
  3.6687041562396297`*^9, 3.6687041567959967`*^9}}],

Cell[BoxData["\<\"Determinate\"\>"], "Output",
 CellChangeTimes->{
  3.6687024607989063`*^9, {3.668703921557385*^9, 3.668703974243973*^9}, {
   3.668704053500814*^9, 3.668704065893696*^9}, 3.668704157259759*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["11.", "Subsubsection",
 CellChangeTimes->{{3.6687024691270113`*^9, 3.668702469746049*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RowReduce", "[", 
   RowBox[{"Join", "[", 
    RowBox[{"a", ",", "b", ",", "2"}], "]"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.6687024730108624`*^9, 3.668702487193903*^9}, {
  3.668702520668858*^9, 3.6687025235418873`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0", "0", "0", "0", 
      RowBox[{"-", "500"}]},
     {"0", "1", "0", "0", "0", "0", 
      RowBox[{"250", " ", 
       SqrtBox["3"]}]},
     {"0", "0", "1", "0", "0", "0", 
      RowBox[{
       RowBox[{"-", "500"}], " ", 
       SqrtBox["3"]}]},
     {"0", "0", "0", "1", "0", "0", "0"},
     {"0", "0", "0", "0", "1", "0", "250"},
     {"0", "0", "0", "0", "0", "1", "750"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.668702479480564*^9, 3.6687025242433577`*^9, 3.66870301473104*^9, {
   3.668703191292889*^9, 3.668703240978052*^9}, 3.668703312807404*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Inverse", "[", "a", "]"}], ".", "b"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.668702534326054*^9, 3.6687025428532257`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "500"}]},
     {
      RowBox[{"250", " ", 
       SqrtBox["3"]}]},
     {
      RowBox[{
       RowBox[{"-", "500"}], " ", 
       SqrtBox["3"]}]},
     {"0"},
     {"250"},
     {"750"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.6687025431548223`*^9, 3.668703030294203*^9, {3.6687031913970137`*^9, 
   3.668703241082741*^9}, 3.6687033128923597`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"LinearSolve", "[", 
   RowBox[{"a", ",", "b"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.668702549765918*^9, 3.6687025581469088`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "500"}]},
     {
      RowBox[{"250", " ", 
       SqrtBox["3"]}]},
     {
      RowBox[{
       RowBox[{"-", "500"}], " ", 
       SqrtBox["3"]}]},
     {"0"},
     {"250"},
     {"750"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668702554208926*^9, 3.668702558484334*^9}, 
   3.668703032781844*^9, {3.668703191460614*^9, 3.668703241151108*^9}, 
   3.668703312964077*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["12.", "Subsubsection",
 CellChangeTimes->{{3.6687025665840683`*^9, 3.668702567177204*^9}}],

Cell[TextData[{
 "Because of the way the FBDs are drawn, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["F", "1"], "..."}], 
    SubscriptBox["F", "3"]}], TraditionalForm]]],
 " represent the amount of tension in the three beams. By that \
interpretation, the solution implies beams 1 and 3 are in compression, and \
beam 2 is in tension. In reality, that doesn\[CloseCurlyQuote]t make any \
sense. It turns out that you switched the definitions of beams 2 and 3, so \
actually the lower element is in tension, as expected."
}], "Text",
 CellChangeTimes->{{3.668702608148027*^9, 3.66870264048604*^9}, {
  3.66870268511628*^9, 3.668702746512528*^9}, {3.668703386292375*^9, 
  3.668703408836334*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["13.", "Subsubsection",
 CellChangeTimes->{{3.668703413957643*^9, 3.6687034141011143`*^9}}],

Cell[TextData[{
 "Adding the additional constraint will make the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " vector one element longer, necessitating ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]]],
 " getting wider by one element. That will make it non-square, and will \
eliminate the possibility of having a unique solution (one more unknown than \
equation)."
}], "Text",
 CellChangeTimes->{{3.668703520532481*^9, 3.6687035986680193`*^9}}],

Cell[TextData[{
 "Equation 5 becomes ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      SubscriptBox["F", "2"]}], "-", 
     RowBox[{
      SubscriptBox["F", "3"], 
      RowBox[{"cos", "(", "60", ")"}]}], "+", 
     SubscriptBox["R", "cx"]}], "=", "0"}], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{{3.668703603105329*^9, 3.66870365341625*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"(", GridBox[{
      {
       RowBox[{"-", 
        RowBox[{"Sin", "[", 
         RowBox[{"30", " ", "Degree"}], "]"}]}], "0", 
       RowBox[{"-", 
        RowBox[{"Sin", "[", 
         RowBox[{"60", " ", "Degree"}], "]"}]}], "0", "0", "0", "0"},
      {
       RowBox[{"-", 
        RowBox[{"Cos", "[", 
         RowBox[{"30", " ", "Degree"}], "]"}]}], "0", 
       RowBox[{"Cos", "[", 
        RowBox[{"60", " ", "Degree"}], "]"}], "0", "0", "0", "0"},
      {
       RowBox[{"Cos", "[", 
        RowBox[{"30", " ", "Degree"}], "]"}], "1", "0", "1", "0", "0", "0"},
      {
       RowBox[{"Sin", "[", 
        RowBox[{"30", " ", "Degree"}], "]"}], "0", "0", "0", "1", "0", "0"},
      {"0", 
       RowBox[{"-", "1"}], 
       RowBox[{"-", 
        RowBox[{"Cos", "[", 
         RowBox[{"60", " ", "Degree"}], "]"}]}], "0", "0", "0", "1"},
      {"0", "0", 
       RowBox[{"Sin", "[", 
        RowBox[{"60", " ", "Degree"}], "]"}], "0", "0", "1", "0"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"Transpose", "@", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"1000", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
      "}"}], "}"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.668702272782608*^9, 3.668702409111197*^9}, {
  3.6687024919005632`*^9, 3.668702517258933*^9}, {3.668703670009467*^9, 
  3.668703684625682*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"Quiet", "[", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"Inverse", "[", "a", "]"}], "]"}], "===", "Inverse"}], "]"}], 
   ",", "\"\<Indeterminate\>\"", ",", "\"\<Determinate\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.668702426729653*^9, 3.6687024603937063`*^9}, {
  3.668703908458234*^9, 3.668703931384507*^9}, {3.66870396469836*^9, 
  3.6687039737662363`*^9}, {3.668704043865979*^9, 3.668704061597528*^9}, {
  3.6687041562396297`*^9, 3.6687041567959967`*^9}}],

Cell[BoxData["\<\"Indeterminate\"\>"], "Output",
 CellChangeTimes->{
  3.6687024607989063`*^9, {3.668703921557385*^9, 3.668703974243973*^9}, {
   3.668704053500814*^9, 3.668704065893696*^9}, {3.668704157259759*^9, 
   3.668704170091241*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RowReduce", "[", 
   RowBox[{"Join", "[", 
    RowBox[{"a", ",", "b", ",", "2"}], "]"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.6687024730108624`*^9, 3.668702487193903*^9}, {
  3.668702520668858*^9, 3.6687025235418873`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0", "0", "0", "0", "0", 
      RowBox[{"-", "500"}]},
     {"0", "1", "0", "0", "0", "0", 
      RowBox[{"-", "1"}], 
      RowBox[{"250", " ", 
       SqrtBox["3"]}]},
     {"0", "0", "1", "0", "0", "0", "0", 
      RowBox[{
       RowBox[{"-", "500"}], " ", 
       SqrtBox["3"]}]},
     {"0", "0", "0", "1", "0", "0", "1", "0"},
     {"0", "0", "0", "0", "1", "0", "0", "250"},
     {"0", "0", "0", "0", "0", "1", "0", "750"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.668702479480564*^9, 3.6687025242433577`*^9, 3.66870301473104*^9, {
   3.668703191292889*^9, 3.668703240978052*^9}, 3.668703312807404*^9, 
   3.6687037098180513`*^9, 3.6687041738084183`*^9}]
}, Open  ]],

Cell[TextData[{
 "I have little idea what ",
 Cell[BoxData[
  FormBox[
   RowBox[{"PseudoInverse", "[", "]"}], TraditionalForm]]],
 " does, but it was recommended. Help?"
}], "Text",
 CellChangeTimes->{{3.668704184569542*^9, 3.668704212134883*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Inverse", "[", "a", "]"}], ".", "b"}], "//", "MatrixForm"}], 
   ";"}], " ", 
  RowBox[{"(*", " ", "Fails", " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PseudoInverse", "[", "a", "]"}], ".", "b"}], "//", 
  "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.668702534326054*^9, 3.6687025428532257`*^9}, {
  3.668703715877274*^9, 3.668703726109824*^9}, {3.668704324753187*^9, 
  3.6687043278366013`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Inverse", "::", "matsq"}], "MessageName"], ":", 
  " ", "\<\"Argument \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\
\"{\\\", RowBox[{RowBox[{\\\"-\\\", FractionBox[\\\"1\\\", \\\"2\\\"]}], \
\\\",\\\", \\\"0\\\", \\\",\\\", RowBox[{\\\"-\\\", FractionBox[SqrtBox[\\\"3\
\\\"], \\\"2\\\"]}], \\\",\\\", \\\"0\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \
\\\"0\\\", \\\",\\\", \\\"0\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"-\\\", FractionBox[SqrtBox[\\\"3\\\"], \\\"2\\\"]}], \
\\\",\\\", \\\"0\\\", \\\",\\\", FractionBox[\\\"1\\\", \\\"2\\\"], \
\\\",\\\", \\\"0\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \
\\\"0\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{FractionBox[SqrtBox[\\\"3\\\"], \\\"2\\\"], \\\",\\\", \\\"1\\\", \
\\\",\\\", \\\"0\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \
\\\"0\\\", \\\",\\\", \\\"0\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{FractionBox[\\\"1\\\", \\\"2\\\"], \\\",\\\", \\\"0\\\", \\\",\\\", \
\\\"0\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"0\\\", \
\\\",\\\", \\\"0\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\
\"0\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \
RowBox[{\\\"-\\\", FractionBox[\\\"1\\\", \\\"2\\\"]}], \\\",\\\", \\\"0\\\", \
\\\",\\\", \\\"0\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \\\"1\\\"}], \
\\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\"0\\\", \\\",\\\", \
\\\"0\\\", \\\",\\\", FractionBox[SqrtBox[\\\"3\\\"], \\\"2\\\"], \\\",\\\", \
\\\"0\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \
\\\"0\\\"}], \\\"}\\\"}]}], \\\"}\\\"}]\\)\[NoBreak] at position \
\[NoBreak]\\!\\(\\*RowBox[{\\\"1\\\"}]\\)\[NoBreak] is not a non-empty square \
matrix. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/matsq\\\", ButtonNote -> \
\\\"Inverse::matsq\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.668703709940172*^9, 3.668703726949305*^9}, 
   3.668704178177113*^9, 3.668704329137782*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "500"}]},
     {
      FractionBox["500", 
       SqrtBox["3"]]},
     {
      RowBox[{
       RowBox[{"-", "500"}], " ", 
       SqrtBox["3"]}]},
     {
      FractionBox["250", 
       SqrtBox["3"]]},
     {"250"},
     {"750"},
     {
      RowBox[{"-", 
       FractionBox["250", 
        SqrtBox["3"]]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.668703727002275*^9, 3.668704178236805*^9, 
  3.668704329200122*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"LinearSolve", "[", 
   RowBox[{"a", ",", "b"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.668702549765918*^9, 3.6687025581469088`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "500"}]},
     {
      RowBox[{"250", " ", 
       SqrtBox["3"]}]},
     {
      RowBox[{
       RowBox[{"-", "500"}], " ", 
       SqrtBox["3"]}]},
     {"0"},
     {"250"},
     {"750"},
     {"0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668702554208926*^9, 3.668702558484334*^9}, 
   3.668703032781844*^9, {3.668703191460614*^9, 3.668703241151108*^9}, 
   3.668703312964077*^9, 3.66870371006527*^9, 3.668703749954259*^9}]
}, Open  ]],

Cell["\<\
This is an indeterminite system, so LinearSolve gives a solution that works. \
PseudoInverse also gives a solution that works, although Inverse[] fails \
because the matrix is non-square.\
\>", "Text",
 CellChangeTimes->{{3.6687038475790977`*^9, 3.668703850894431*^9}, {
  3.6687042194704037`*^9, 3.668704270726075*^9}}],

Cell["\<\
Solving the parallelogram problem was less useful than overachieving on the \
last problem, so I chose the latter.\
\>", "Text",
 CellChangeTimes->{{3.668733503507724*^9, 3.6687335222880917`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Design Problem: Hanging a Sign", "Section",
 CellChangeTimes->{{3.668716669511644*^9, 3.668716692515229*^9}}],

Cell[TextData[{
 "The basic design I\[CloseCurlyQuote]m investigating is a rigid triangle \
mounted to the wall, with a free-hanging equilateral triangle with a mass \
mounted at each lower vertex. What makes this design ",
 StyleBox["particularly",
  FontSlant->"Italic"],
 " interesting is that it should not be solvable in any case except the \
special one where the two external forces are exactly equal. That implies \
that the matrix ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]]],
 " must be singular. Despite that, for the special set of cases given, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"m", ".", "x"}], "=", "b"}], TraditionalForm]]],
 " should have a singular solution.\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
/OvAo4bgXhPcLAW7ErheAe4t8GsRpvOFDzh8mHf4OJOv2pvcF4ZX2bLWw2TV
gUfSqO2L4YDkyQ+le0c63K6Lrge06In2KvoGOPdpwixufJtqmOHguQaeTkYW
LIpyYwdHm1YkiqLW9N3VGUtoqCzWDsL39ezcAk83H29XP1V9Mz3GloLsxd7d
b3h3tFuT/DFxts9jsDa0X7WJ74GkZUa6Unoqufclrw6jYNaxPn/8eFcREv9J
DXtowi5nRKEo5MdA0tO7XQ3Mty8HPNKCnGLqjIlKTVVSepwtNx7qWtB8nHx+
WK7buAMNX6CnMLCjwsTTpngMEHijAv8j3VnOZPEI8VOW5jMbyWwgTOYjtE3c
d8wbJeFU1GFSwryW79w2ZPUfP67QQ3gf3KjELRKefQC5cKMYbLLw869VYPsV
PPPBvQA3kbmWgi36ez5AHHgXBsa3ts6YzWTSEE6iku+C7jgmic4YFw5MHKQt
wpMBiOzrnNUd4mlEWOOCnlIqR39hm4fVvsPk408MLXLN4Kifd6CXi++X1Gx6
bVw8TdtiZxVezJY6Uy2u31/2G2l4MNg0c3JIsmr81abWaO7xy9ro9bpcUOVW
LIyJP7/zjzsdIsZboSQeMl6+HOpl+W96y2aRFfCNhhDpOFldXzIydASJDH8C
bRTk0Ysxy1fhGKP/JvR7t9oKf2ktrFqYwgxNeZY3kVQWhR8I7hhZSELCcmcC
HZ0sYTFUnsH+Hnb2OJYzUv4f+kVPuicwvAsGzOWUpJLRE3g6Co4q8BsApzLw
rsPSBHZ1YJsD8A7gOcALgESABNJbkSi3VNgkXovsPCHlB6pyz5lQAGxksZAK
aR+T2NBmFsIGIWL8VdXq6JKJkL8EKpPGE+lI4afmGvx/2nngQetBbzD7+9xG
3l1YaBTLULg794Jvwwj1EiV6TVngTpCGTw8ChxvuaFSa7XXiGzDilaIR8jFQ
PJ65NuZQlwd1mZ/6W7ifPrUrCFpJKNWv2TXmQUV6n+H0gtsHGVgmnJpOGQWd
qBSevKWz/BtRzaJOD0EGI2Hw4ubQ/ZWvKzN0uhLCOJ3AUsad3CDz4xi+bVPl
ARzgS1Rx1khwG+/7WfZSkmtqHCuZOLSw8YoyMbMHAiSv4fY071p4NnQjbTWq
noW0Q3i7BC41MsRdq4JblaRVNok0WbzEnWUBbUNrJtGEW5WXdw41PeM1lU2p
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
ua/TGo+P9NtbB6srW8tLG9oTA90CryTwjk60ulPjqdG8vbM3PbOwsLg6PjHT
0dWLHsMjE5rB0aaW9vrm1mpVY0VtfXlNXUFxOcW6vMLSzNyvn1IzklLSEz6l
vnr7Ie594oeklDfxH4tKSmvrVdMzcyh6ReBJPwhFEyW1zXlFVcWVdRU1KgPp
6zo/AAWBs1arW15e7e8brKmuRx+Qn1eSmpL19k0iAjH6iI569TQ85lnMawR0
CPRCI2LRDw8fRyD0Q4/QiBf0EfbsJXp+8vT54/DYx2ExD0Ki7twN8wm4jx7e
/vfQc0DQQy+/II+A+/cfR9+5H+rlFfjgfmhUROyju4/8PP2cHFx/tb2J7vv2
bm4ePkGeLl6/YOAiAHbN8ZqtA8Ux51uu6BnOzEZ5Ri+wJQ97G7dnzg+znJ6X
30vr+ZDd6X/nqd0NRxRPre0e0YEgvFafpTbDvVZ40OvxYUhHJBHIiDdZWtAK
d5ew89Eowpvs/JKUjIKsvNKi8obP6fmrG7sSuaY2Nrc9/AIQ3IWHRVpeL8PU
JUqqIv9xuM1TUxvSrzKwCq/z6kqzaEGkro4kr492s4evlzTQkO5cn2v60VbH
H9VmxHP2m7/zROqI5Tcl6dXB1K25lrC5noPfBqEikd5Et63S8orMrK8ZmQU5
ucXx8clxcQkJCSmJiaklpTXzOLzb7Bsanpidq2tqamxrX1hd6x8e6erpH5+Y
nZldQs+zc8sHRzoULaJnhIfIzVvf2Nrc2kFh7LH29NTIolV0cHy0f3ioNxow
j5bnaAxKy/QIxyyhOoVuiYiUHOmMrZ299Q3Nf7wpWRbG4dGxRjNUUVlVXFSJ
EC/tS86H+OSXL97FxsS9evkeoV98wqe37xO/pGfn5BVmZud/+pz2taisoamt
vXsgr7C8ur5FrRlDz/lFFcXltci3rKhpLqtqRKs9KSUz6vkb5AdiqHwa43//
SfDjZ8EPwt28Ahwc3J3sXG/ZOjjccLS/6ejo4O5q7+xsZ2/7K8Ku69ds7Ah8
XQdwvH7D1/GGa/D9x94RL8E5WIZBQIgYAHCbhLGP4NcIgEgIzIXXavfEsbuf
+54mqT4kFL55/Sk3u0R7zJArgTDxTGyamoFHXfCwPThl0kQOmEWURiFKWu27
TU6dSZKquR1hXWZhlaq1K+FzOgou6LpkWbPWaHL19kVw5+Ptf/6N/0kf2Z+Y
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
wqMo6EXHAQYjUg8ZecUQU4qaycFNcKZwbIkO76bPaPrI4BlP70gX6idYdNx5
AndBvkEKVT87GNxpLV0qnr8tVb7X+9WzKTeyodAauVhvIvlAwlC7GQu4RDre
Hm9VifYxUlYeWY1R4GfM233m9TbTWpdxfULkJlR+k2ah2SaI1H6t+u4PNdEq
x2QZLMuE6+dV2aHoE9wNh+thcCkIrkfkjvcrlkgTnSgsskvsaYK0YUVVrTQT
+g6T+lcsxV86VA2fZCYSBgp4kDcVeVOVMldGofiNX3V69+KcFSc1UuVOXuVu
JiMnRJu1JiO3LblsCM6VgFcRuBnAM9fmkqFmYJNumWipL+sDd2R9d7MGwLcc
PA3gU1ReN23cP3OQPt2Rg5fUsgTBhagW5Vd4PRVrQzjugK1IMGsH94ig8uMt
9sLlQL+QQJ9ARRN7lA4Ad4qmIKSy2ujr4RaPxpyQxgLtDqHPce3S3lNded/r
teSXtKtF1KaxaoMm/8+tJNI6iDVPRU0+YK7yd7C/iW2yO58dtITBVki6QfnG
AXAz7HjGm8aFGcZIpLJRFI7oWds5f5bV3y2nVbV4jNo6FrntxyVZoRlvfDNe
uWW8iq7PO91f4VCRUjI1pEoauVbZ+aLtMHvc5pp2Ix04PruhvCNRoecncE4G
j3pwTo9909w9topbJZk5fpstUDe4Iy5ZUD74l+P0scCU1e2DXLcc6qOYJKpr
AUGZcLIKPIvgbNWmmR5X1kUsChieY2Huj70OD4/FX77G4E6lxfT/5fanpXcs
xqdM9BC4824p2LQwBrS+bFU9wLW3l8nKd+/Rkm6SqYPHlGk1t5PyljGbxAus
qisyNUuC7QL3J4zU2sX+BnfWAbVbvLFsfRIyHsOtEHTw7p6E2yevNVVMCFuq
5STSKrksWtgs7NwJHErhac8sWfmOVJSjPri17J70GHKeQPZTyH0C+c+dOgrs
KlOKliaYgI1WqkAtxv/kV9NTg/Ij0ytK5ItmCCgCpwJwN0BA2rXUti3Wbo86
VUy1WLdglqzxQ9MKBNVAUAV4lT/M6cVAUzDvdynUhTBhDULi3R+1oxCodxmE
GCq+rbJiLqvekaNokvkjuPsJdvHaTQJ3Ad4BqgXuDkBEYxcVi4DItZU3N0Tg
zqklb3BjSZOnEzUu78Euvt1XrHUsWmU3FIsuB8uZ01ShxMInwSoAyAuqNrpF
+6uOW3SojHUFWpNj+DvNznGKeVTdsil6B8/Pwk1KwLsaBHkfSmYHOZmRjTVA
Y84zne8jWycC0G5kkbf0u2C/HoUzcl+/aq2Iqs3yNiS6FCc65CdA2hPIfOxS
k5EzMzglmbdw2qCVlKv92KMAQP66KkglHbOnHrXQCdeF4JNtd/kreQebQTBO
1GRJWb+HXnBHlgr3epFu518CYQaTTBOD+10Ke0bIIpu60jIroxRVaDUEFoQ+
a0U5LUXT4iFbyKv8n3sZHiK7fOPW/w53EjUt4aOqhsUxAncnWnLrZ0fWRY6B
ErtatMBTJxPZvaZqeQ+RXjl4wwqiJWG4Q8oevRZcO6/JhKhMA0r6c3PEMu0+
IMa0btDZY30R2CQlnu+ugC8P4E4E3D8Jl4LhRdybb3XbtH/K0jyLVG10kU0m
OrAQ6WQ4yVeTk5VZ4cOsSN9LGLQ1pl/d7ubWEzobfAwpkPMMalNcazNCGnNj
a7IetlcUjX0b3lgyWXS3xD0kQhT1fck0uKeCRwESQrwyg180dc1uKxgMcqxh
UJvbS6eG6gV3n8vmMM8WkEMi2YtZ/cSB5NSDXLgik0Al8SqVh4frLRBRDX4F
4P1lfIFHuQCZ0UplVq04st2MnMSdVS32zwMs5Mnj5/5+wb40mEVRkX+VxvnH
5VDxDfyNtsh0bi75thR4NuVl9ndqGR5065mw/BGp/Ncb3lqC0sivulemYQbv
ThCc94NrQZ75qcVTw1rfmcIaSw8yP5udZaOKPWj5w533WkqJyxdc+8W1ISeg
qySio+x6W0X5xJBMa7iKlljQBofgdUIfQFtG7tSrVrD/DO6VOPzL58OFN/Ub
NKrU7UBQohTropVZOyGtd0B8E/gawLeUrHdmyWiWWeJx/7eGhHo+1AkmyGd6
WzkHQeVYovUpeleyQB+62GQhqGZBPdCN9/+N6QJ3BN/u3X0YFBgWGBDK3rFo
wu/PNK0zy89x81Z4U2FQfe7HnubvVQFFG1P1Z4/C+T2M+lPrivRh6hvONiIh
7QVfpBzfjY4szWAFi03ZIguy/0GcioVPzmLVbVWel0wjprWKubGkwY7bHVVX
mkvvVeXPCeiloeeP24OdGRJ28GM7f+8MH/OwGbyywKEI3MrBPzmrbkzQaiX6
mXYlynRuiUYb+DpkgtAy8CsDz7xjl6spY1QRZeFg3UbYm8tTWJXV0S0FAkro
vIwC91vNCu29xZCE5/CpcpS62930gru7dx4QuAvwD2EjLQ62HCaqRmNHxMol
VY5oLvJvyH3RUq2FOWga3B3N2fz1xubriNKkbPRqyob0u3DvFMT7wtUAeH2l
k1+XqJcuaQNP9n2+BEnkOA61SgTJ2knBuCtksQTlejaXa8f6zPQvKEioqVLI
rNG1fUp0uVENbrngUglOXzxuVRXVTVom5vB6ekEKq8vJIq/QVCRuQETqFGKd
dxkE5CdXTjPRTjaZcb9GazEcWQW2k9EVQFwN+JXi2EcfHBUqY8EatwEfKUdw
t7vpFcy+evmWBLPeXv4bG5sHT+1a4I4WLNQVVQ1uyXdtzL5ZZ8CrxEK7I3eB
8qunzB+ZSks05GKhOpNy/uIQVHyAxBuo6H7BB64GPRxoYg4e7aJXDqDO9jcG
kLVWrqkR0hiZFYwE3ixRypxsFlnqPqNmwv7KV8zUeaN/5Xa1YHB2C9GS6jdR
GrNugCdRLGLiiLzCJP4kuNgCwV9x7aHZy2uyzIoIB8ryIM2bDsKwhODcjcJx
DMx9y8GrtG14la6RZSBl8UgqZXfTBe6I5WTns9zdwsISi2QPBpsqVdpk3PB1
VT7VXODekH2+Nn9dsozKUWXGetVT1fbIDmQsShVoALemmGO6yiD7CdyLwJ6y
iz4nMt9uqCrBIY4NUtx/jp41fiHZ+6+5ERGHrfKsUC5aNN61lJ1oMnPC58ox
CPwC7jngVQAeWZffNQ7PaeMfLIL8BJh0C2c5lY1D5DQataTOGQUINUBgDXgX
wYUC1Uzr0YjUkvEAOpBUJEqQzCrTx1PViXURB9QG1IJPSey7FnoG6P4I4rZ6
EAfy/xPTC+7q65pCgiOCg8InJqbYcg7gfTHmrlnjDqEXd7e98lRdztm6/Gkm
aUg/xdOepiN5w8NgVOUYlaHI+aicH4Gy1/AqBi764eyeJ+fe9rRSDSXF/D8I
ZO0MFtgvorVKzrQdVI1KJKuorPIopROV5TzKUeHE//PrL91GgcndiBbfCr1B
HSsVWG9FH5bHWgndtPyuVfDPAZ9ScElJqBhReVr3pSKAwv5zzjIrClEPTlFN
PMb1/PE7TdhN5lkIYdmLWwTMOeQS8MoBlv//j+kFdx3tPWGhpwjcdXR0qRam
1n4Xwqa6UDYbpbGJUuJI+/nGosimooGVBdYSjtTSHQ2YR/YrjcVvZpybQOLK
NcEcO1ABuc8g3gNiXZGD9+7OEHlOoaDTgcBOlHZ2DpLLQ9Ca+wSVickr7DP4
AeKzTWwZb6V+A5cv4GFAqXO/9OK6RXw+8jzZUrNCnpgiPkgFRdtynYwsCaFG
okqmFNPCEgbALx+H0gZlbAhMOVHUVA/2f92yxLWorYKOBeHFuySeDaoBr0rw
yU39usomXzAtKb32688zveCuva0rNOSkn29QeXmF+n94+P/R8ArEwpXM8r3k
nS9Lw+c6Ss+0GroWplmTEXHrj+DukJh2mrQUAz7duriV2B4D3KJDyuJ8INb7
fGn2vGDECUfm/xVemEtPV6QVP5heCht8M726Fna3FdxSkPvhk+N4wVDVtMCm
UVBmlEz7oRVeNJGo0yRsSPK+uxt2NU4RJJ66X4IkkOWaIbYefMvQ9brdqCom
Ex04qyo4FEoy7jvY1EROBEWDTTrIG/nG3lng2woh1f4PR7Q0KX7uSALqn00v
OiW54traO339gjxcvb+kZaoMjvZPPEA/XLQ8dClzssO0dLqn5GJbeenoAEve
oeOH8zhFs65UgiM7gH0vJSjavbYm8yOmNUi5hw7eBX+Idocn8RWTwwpL3wki
lWD6PlERr5N/r5ESPEOgYLCGcbG0vUnlQGnJAf26ntG1a4kd4JYOPhXglmZ/
IWlofp1l835O4p6AHequiOQXbEbDPlnvUnBP+lw4htVUShJWWTO2fhsEEXng
UQnBNeCXJSBTBVkovKofjP9ZphfckWt4cGjE3tHVztYxMeGT9ub+U8HU2bfQ
kuhWDJnXIjqLolsMSX1tLDGOBTicTiXxR077ITAr48ziWMiLkvnJQCPcPwXn
POCsF5zzCSpO6ZGMqyqTgqK5fJrooA0pyp7nkdPImDsDEO1Pml9HXJ32YaPj
lRpwSwLfKnD++CRvvHfaZOQVRVPq+wnXCW2yRi61TNy8+u4N8K8GryrwLKjp
2WC0GVZHkXTdnOsJfVifDawGv4rynjU8IuYj125X0wvuyIkmcGdr5+hk7/op
MUll9fb9O4nWdgmNVqeoy4Ipoi0/sLHgdmsFT+tePJX+OgplD4NZS/A4A0S0
Ipg6LZv8K9Pgoi+cdUXEux0Z0VGW0NVEkBC/Rhtn0DeziKXssQYksWg5YJkO
7eJZu65sERyt6Z73vtWAbbAepeDx5UpiM65DY4MQz5H7GXAna9MBeFqijX3V
A97E46oFt6KRFRJImyzZRxWrq/pdub2TMnhlYIbQv9H5Tj1NZkpHAlC7mY5w
N7+wZGfvbHfc4f3bDyp7fO9fVpUpADBeupky1EVZiuko9mwpCG/IN1J+KVWB
1Ar/R/ZrjekGsLIUQTzFMnmXeBn926s2uW9RCi/SHU65wYuLkPnmfXvtMmfG
oYWKVpZSzeIeSQ8cO2z5I16XTKBTYyxjFPClagyi8sA5B1zywDf1Y17P7KYg
qRxn3mK9ugqd+/Cjj4NCR9FhOYRyfSHKAF4l4Fdqc6ZslQ5cprhOyTi6jpgg
R8D2dhOSmf2qwSdnbpaOCzrio+5iesGdRHvmT9g5nbCxv3HtFos7ZG7//B9R
G8pMLhCjqpXeHvV99egq9mzImeWMWlygHMHdoTBrQUqhvCPW76DBkaLWbczZ
VaVhzYI4eOf94GksJFxPHsSkhMjE1KmTvgfxVtEEG2ixU6KVKsrIxC+I3PvS
EfDLRWadZwFE5CaVdDMPUMBZ1PSWt8zj/tGG+oeyyGYhjhCPKzAHfIvBI/dD
yQSnavMZcUdo54We3UDSVssAj7m7gFLwr7mfPWoSVP7IudvFdPTuyIPdzsHF
0c7lzKloy9L3vT10MQrL4GnaQYpaONPv1WVwb8prW1vUyoCKehTMHgbTRN0t
odpOB49VMZpXF+D1ZSSlRLphYHvZF97cbF1doF/WKo576CLSsIw8SXnLaEKZ
V02SKhjNSmr1GHHnwLMWPIvB603pgIlj2KiVT2Rr9V758cUKHLsmmdhFeefL
BAQWg18l+Bcsc1hUY3CnaKomqp66iFTUFMIqcRBGYDNcqlFV01EBbzfTsVQh
iLKrmzfx7vx8ArTn9f6D2e9D5OkPlsQe2FzybTWQeDZ/coBdKZTaetQq8+tN
a4enEIdtYpYZIvRppRFEYhsKIN4dzjjBKUcIPQHBtoF5H3FmG+WwSIqIFI5d
jEOpVYoSlHtCZxBKc1vSvXct4PcF1Zyc045dKMmqHWfXg9ZYzRQIfyLc4fhO
aQt7yWQJzldCcDl4lzs/aKJzpCTeLEg7Zq7rOJAY/WTFCPdaIbAUvKoh1NA7
u/0T9vc3NR3hjnzHxzfQ2cHNwc4pOzt7a2vrAP4XtguJ30XPzLTRe0U0+zQW
ercUfOxrZQ9KC6XzyH6xiSxJK4jaeB2rXjF930SRqk/ehORb6OCddIAAW/AH
uBT4vqeefZezECx3WT7xF80MwSTKt+ybNJ+/UwFuqejUeRTC2Zz6oXXNm8Nx
Yzjrgm0DiqLIBwkxDmDEh8PtNCtGZQsCvqAQilvew/JxybyNDwKJwwoL3Uri
qeJ0ct0MC7G51UsQkItV6aDayOSpo/tiD7MqN7I8jPJvzV/kg+x7KDohohAi
9eVkQVTdPXxcnd1sbGxd3L3TsnN1fIpdai8JbM2/0FTCc9p0laPa7KE2S8YM
Je5l9WZ/PdwJhChXCHOEIBt4FgNJ99ukDY7m1mhVi7a+opsn0tqtrAom2iDA
0wYbgQo6qSZeCb5ZSTw6cMkkP92vljYOrOCaOKZuqV+XBCvs0rm3JJgmP9s2
55s2ZqdFI9XXxOwgSjnRu0ClaUsmYfG+ah2ck8AuCRxSGkc29dqe3YwdK/KU
gTOF4JsDfhUQWjG6xdP6DpUbRD0oPBWUxLX/2THE+/grnUxR98ojadEZNVbD
OoDv9EON4RUSCeT/KtzE8I3jcDqwho2KWl31lbh2djYn3BxcvLz9q+oaWDuN
LpYw2BzeUhDTUjK/ucXm7nFHmq2H2dgIRUuKtV5Yh9fnkZcSZg+RTvDqHDyP
v9RRWcutjqnypixtqzIOt6COHs8aZySTKFhnznLkShqYlW8md4FTMrgUguNH
n9sFHfM4lZZnTTa6SkmzGqp2q8rquip9GGp5NtZctjg5sL2xzPFmRvaQNDId
uRsonggxiX0Ar+HYe7B7+zPCD4nJDqhnXn8D72J08DyLPjZvaVVgJhaNVRuU
iDmAzp5sGaDJUIIFfvvCL0ZS2u96f6j9dxzGLmheo30yoNvc3OrvHyzMyjsZ
ftrB1tHthLO9zYn01AzFEmDoYrXLEydbC0+1l7bPTW/R02ZUD92D48isZk1H
sDI6gTKfinS47INV2ih3uBEKj6OhJOHcfPuTlYHMhaG67Zk+gSMBAi8KtFkG
q7EyY5DQC6l72uh8g0SImWCfC67ptxNbhpZNtHtUYMxzUT6AvtSuxltrLXQD
FlXhZV/9je6KD0Mdhrmx2pmx/rVlMwUbhaVWZJSxI96T5/tBgMfkFfKw5Sfo
zlEVfdzC1nEZ/IrBvwZ8iuFqi8jEoDB5LmIorVqP5D5NwYEs1nCP3PvSfwiq
GDgcrI30J9h/T9lZIlntKyYTt7K69uL5ax93H0c7LMva29i72DlvbVBqt377
OiRuRrQWBneVFg73ipJlW/WcVnFkepomOyJq/WKyWSyZH0Pq3bVgJKX420KM
J+Q+PTXfcmWuJWywLLa/5vpAS+Zkb/Xq8DBHZyDKMtVQMZNbraR6xOV8Njim
gGMJ8e4uprZuyVZElVm8TPlLunoRlCHD1kJQtXN9rmy8j2xh7mhPVl9b5mBH
2czg8NaKwGaUUGyc3VbgZjPYvAR4mtO2bf7xE8HWRY7N5yWIhoJX3kXgbwCf
/Il1RSARN23ZkxWT1vJyAAIMK7JbkGF722TmpP941x3CSNZq+y1S4ARqHtMV
dV8bT5866+Dgeur02cDgcDsbu7DAcPK+ied03NllVYhuKQptL0nuaraq2h7B
3aE1gXa2WlsJyGtTkV90fEVp9xhXCHYE3xPwJPZkf9XNyRZo+gKlnyE/AfJf
O5R+eNlaS6U96LxfmStsWQFvAnRJ4J0LtgkX3tQvrm+hjjuNNWighAURDn1D
neFOkESrm4qEaLO5b32pdWnmVWuVV8EH+HgnuOBTestXmQ1ck+RnFasQmAtw
D+ARcT31dDd3MTPNHOJ9KHNR7zqQjuJbCX5l91L6TIqJJ9gk4QgLLc99AAUY
uu/Mu6utqSeOTUJi0vLqrjnJQ4tvfzPlr7ooe5g1xUf2bHZm8fKl6+5u3u5e
AQlJqecvX3dwcA8OCOOF/0Hd7J+MxAu3W8siW0uftdVYo4yjCtShNTNtDaMn
iE6tVPGUrYg8JD2FoOMQaA9BHhDmAh/u2lVlQsZTeHcNcl9A/nMoTUwe7qHn
FwsBrYMbEJACzuXgnAoxGTff10/Nmxm+0QKFpNC2MpV2iul4yX0njfCa5yZb
mtYIzj5sLIeku/A2Dl7Hw7XTNxurmrl1Es/A7W6wSwF4C/6p5BD8lFKaqEoc
1UIR2yZlCCkB72bwqYSIwk2VKTajIpUmLXoApgTdfbOZJ3t/4/rtK5dvXL58
q6S0Zu9v/U1h6fCojlsdTpZRZNnIPT7PtpyjB3hgYOjRw6cB/iGuLt7xl26N
TM09ePLixHFnf58QgdatdFQbJot61VMX01Z2rbVcQznlCO4Or7GZI2aq1kTO
HlIvaEBVszgNjy6Cnx2EuoLvcZR5/3QHEm5D9svgbkP0QMWNybZxxDKBOIdj
K7JdfBE4poKTAcI+FbdNsDkPGtFFEeklwIJZjjXp67X9ikVpVuG1WZNalZay
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
9RmFoz1aOlGQN2UpobvxYnNJRGepbvu1iw1MGCGgCJyLwTvP+UKtLDKmxW+f
lPhBxlRw2P3V2NpJ4M7O1rGpsU2/FeBN9Hyg6URjtm1rbtnUIAZrf0LUpI+R
K/bG9dskknV399s24TCUgwWz1D+RqGqoVVdc5gTkSCyJ6rGL+eBXBN454Jv6
bZxEt1uUh4+POpxIiJMXkHEnqT9ctfhHm8jUD7BQi4m85ikZvL+AUyI4X7Z/
9QZeXYEn8fDqMny+DV8eu9fmXG42xNXmvu6o6ViYZIUPAv7ENe4WN1/M95xq
K8pZHn071n5hoObzbO9XbrnOtFSxNv10dTB6oKZ6dmRSNL0eaXVpyIprKO5Z
XmBEbuJe3m0udShI9ChN02u/doM7HJt7pRq8q8EzH4KKplbMgpaxPbJ/MAvl
F++v7r5hZ2cv+xNOLc0d+q1A4VWxaHPatS7Lqa2AwJ0i/8kSAQewC+evBASE
BwZGWPu3DsIAkbVuUoZ1Eurg8/+PvWsBqaJb2+/Xxfsd73jFC17Q0LCwqEgq
iooiqSiKolAKQ1FEURRFFEUURRRFFFEUUUQRRRQRRRRJRBSRRBQRRcTNZrOZ
YRhmGOZf71ozO/vOqXPyt5vfWcdvn+1uO3vPzFrPei/P+7xko5k0Kglvx8C9
AXxqwD81o2JMRSFHBDlBMusKRTIj3CknAu5Yl3ZFxoz4xdw1cC0G+4wzycXl
68tenflQ9sq3JtexLANKXkNpqlVNOlSnQF1aeENeyeTgjkyTCyJmgdtNGwnT
LcSoW5DNBNa2VPUjbyBvmNrfTl4ctCtL3aU6rSMHW7eGmu1bCy/11H6YG5w1
734SjH4V6VDyAopSjuu8vgZ3ZkVIaV0Hp0rwrgLfqpfVSwTk/+fNfm3oGocI
dwMjk3Z2rsS6q69rPsaPEAVuWZUTe+sChmoqZ0ZUpi3zv0EHz/PRUXGhYbER
EXGy8v+AO5qbYAwiBcM3qDVAdvqL6WPgWQZuXeBdWFE/LSAP7UCSGbEcu1RQ
kgkjxqjHrcTyCwarp6DFY6ahDRniW8GhGJxyG6f2DhRxQt2v3pob5nbbDFsv
JjquTfV41+VBLUG8t1D1LrK56P1E9+jOOpueO6LweH3k+lLPomRmxBdGB9xU
RK+qjDOlbynBQDYrysDmp4juKv/WYoeW3HOdZY876k6XvIXat9ZF747rvL5q
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
dJU0TssfBXefh55/YWTjbsNWzFB9yFBN49aiVnMhyz8B7hSqir+wr0S8GMPG
WG4FEFE684nMOwy88zzraSXQuM4JTP//x6F1IqOZR7oDa93UCdwRG6a4dxcS
auBcJ8R2QVJj3PuJlqED1iCM/MdlVY4FR7S6BLXnt0BMFXjUgGcOnK9aP5BY
SvQYby8BKpq/Q0NNbzpPtyuesSJlyxohG9mw+cB9qCZgtG5NEL64p0e4wbIi
aEWRLPrE9gLyqcaPn6SQZ8MQ2gox/RDXfK1gru2jyax/0Pbjdx3W3ruFdWxf
35TVjQPlwrsBCGtCafqAur8Saur7llWNNCiwsjJU+2V6BydrIMdY56fJkpaq
SM8uPn8+KSY2QZaZYofIkOE4i25+2tCYRTSMK0vTqnB+qtVzpDp7fpia/Qqv
xXV/8EDihHgzfRDVzLA7dm5J5yd6VTVGFkrHSthHi5N/ZWe0XzVkzc/Qq91V
gXZKlZl/KqlCUfsKhJdilVPCKMTURr3un1zHWPrKtlx/98NjO9dsv0Q3lyRw
LQHb9FOXupv6NszIpZU49cjcj3/3PemhNje3S0pK0zMyc/PyC4uKDw6Mmyvr
RpH2VRc1qoOkYJ3vkCqPyxwLY5Dlw1o5HwXuaKyDbosc62Uhywci80wVMb1l
HvWvotuxLCKhF+Ibb+XMz+0o3J6h99L9PHDuu/pqdXtvZVfIbF6yvd0DvtUQ
3AAhVZBY0Tq6KaNsgoLBBIIGPKW4CyZJNP94ftbPHoqeQNd+pTzGt2kFly/f
vXT5uiwf4qT9UZnZrw1BEm/217r2l58baqTVgjJrvnZcQ5RMHCudVFAaUqaz
Ees8JaFmaBPbVwW2glfVxde9BvVb9O//DTaoS8Ex8klGxTjEFkN0K8SPw+VJ
2/cbEW+noh73O9pG+p5x8bcJRIkAtwrwLSrvm+No21Ut+nScXgk6sE+fvAwM
ivIPID8Rvr4hV6/d9PH0P3/u4pMHT3LSc4rziotyi8qKKytKq3t6BweHxmT5
s6I4tRl0chcWxAm6YX+UQft1iGRWF/csOz7ugPN1uCPEjkJwjcvD8St3G73P
eMSAkz/4BF0ow85lDukQUAl+VRBSfiV1cHLeeIwyCX/EYHCn6E4fue4E7q5d
e3Dl6g31b6nbP9G6+3KQE3n5sYdYd1FDDdTBkGkN3bENnH0c5XpKRlYTQYMF
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
nvWp1CznZsXDuhQUT6Np4vl6inB6zuuBePc259KFy2fPnH+akGrasczOLbx6
9bqpoYm055AzAJ89v2qISUhOSc4ybe0RKsXhO55lpZ4O1MeG8hSkX8zKc0rB
HjWjBK/DQF7isGOfETgSbBSwdyxDxneBY4m/AB3YkNm+ezpF8ESX2r573Id1
UiH6p9h1dDD0VUh3z4PBh0jwOhx8SFi126BdR/GiRf0zg1EcTTkFie5Me/v5
xSUhUXEPA0Mzsl7O6BecTrEzGnqobpXOw85YaSOc+cUwnY2NjVu+N8+dPvfg
bsDKssHJcjRpfmXFjhKkaIcpasmwGRQRGxEet7OzT6RWpDJjiT/xFAzRnxWE
HYEtsq3d1jaDt5DuksYdNifpOOPF0mYZMr4HKE2BE4Xwco1f0foPt/nre/I3
Zo/7uE4qSOCOxPadNFWjVfkWvQalz0HZc/AyrG5+EtId7Rni+zkglSdoQDYk
H4ppbu9MSEl/FB6dmv58dGSSZCUElCFmSQLlUKiTE9u6yJ+kURS0+yf8TV5e
3s0bty6du1RSUMLjnlbSN8a7WN4t0oT1mpY3th6Fx0RFxm+bLGiehUR3vESk
qLoY+72M0wVNyjHn3nVNPah+A3Lg6pAytr9nJSeJIfXbMt/J+E4gukNtiazw
amMyaqTrgV6ZMKY87qM6qUD9YmjGKu9ueoLEMsU6L3ZUgjfhaf3thO6wSOaP
pztPA4iiRPutt0eV+DQlNeV5YkLG9PS004msPgaDpEe/ajZxNONAwib7NjJm
oqay/q7vXZ/rd856X9g27QmHIiekJE8y1ERndjM4ND4oMGpxYdW9R6K+4m6s
IOcBOc4817GzAho/gucRIDUEvE1cpezI/GNQjwc2Cn/gqZLxXwRyvqQVuWNr
IWi2O2ysM3aoAwWXSLyaFzw7QGV8GwKGG8GLSFCVO76/i8tlCcn8sBuYZBDc
MTcikA4NqqXFtdSUzKRnac8SU9vbegnXCR5Zkq/TndNph/bYgc2xZdrlkXYx
HRIYfvPazat/3PyYX8zQX2qwo9AceYCbINa3LZHRSdGRT2f1i+73IppRkh6L
1H6L/6E52PJqLQYvo0BWOPiUvccxolHHcj9jdZDxX4NYD4ovvx7zSuBEe9BI
e+RwpztuI0jFKgjy9fatSJnuBR+egI+ZWZouUnpHbKGf9HZkfCK0vioraiHR
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
dcaPd8WNdkSOtEWNtsPHz6b64obbQ4cUcRpFkqbl8VBbxlgvPMIc/WDmlCpl
tDt1rAdukDmfjHXFz/RGTXenTqtSppQZM/0v5zQ5C0Nw+7A0nLcy2rQ4UTo5
+GKs9+lET8J4N3yvxyNdKaM9b2dUZTOaloWxPsNs6+pM7uJQydq41rKBTFn8
3blFPB0cWh9ZbOLl6dWgPB18TI5vqhCQZv4Pozv4lu1tvW/eFkCuq6lrIhTn
wmxBOiy+DXAVzn7x+tZNvzu3HwxqdILwtZE9giBO6yb4/6RCsIXMELri0WXM
gfxEkBMLUqOcaGWHtwP6vUXgpq3b4qosCBucc2R3s21FX7U4rlic6t1e15o3
eo1Lqu21Fdpu4dllyrbksrrwRFEy0wfeU9C5gLeJWRD0B+Z5+86c0zxp2xra
Wxs0r/RvLw2YV0YONvQH2/A+VVrQ7TnvsuwI9Cq8r5kD6FebeNe64FzjHSuC
c0NwHaDFDjoRjJ11OTjKCT0I1gV/IiomjZkCZxGYTcG5zTm2OLuJd1iRScfA
n8R/txO2wd7kLmWDO9ll7GbaRmFSOuDQbuEBQG9oV4CEQ8MNOizwVS60c3i7
ov3wkhON5U9ZXqJoJ0cdCJRVYJzYGIZnYF/g0MHT1sldY9fabNPadN3scPXq
RPXcSO5YX6amNVXV+FhVH6qqjdY0+g00hWgUgeqmO8o6/z60+fZW+3ZX+fXW
hHfV3O+qutlXHahquK1puKStv9dff6e/7tZAfYCuJWKyO3S0476m8d5AQ6Cu
9eZQ0zVdI/x5Q113trv0bMen613lV3oqHnVWxw20JsPbStcZ3VefpFaULAz3
WNbGXZZx5mCOsq64bKuMw8jTJo6GZsYmQxuRvyY4kY4EP0XZ9E7rPodsTidm
NhzUQMFkIjJGaI9GT6YhwUKmbd9d7j5YH9jfXBUYeDE4KBe87BYE4ffBOlD/
BjTkrrLEPDkMKaA2IoHfoV3QrIqa63s61Zs4NxA3r04Z74uZV6YsD75bHS1Z
mYDE1bw01bE+17cFL6SVARPahnbWRs2Gqb1NeEXN2cwG1rXkOJiz7S06D+DF
CX/Cf8LPOL5nHNpa6V6ebp4Zrp0crBhXl46qCkf6ysc1pdPaoknNh1Flhq4T
mnnQqCsYVsIj+YDNuYKZwTfjyszRHmLmJQ61x2tbU7TtWdqOFF3n89EeSHe5
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
x5MGUpjJIgiCIAiCIAiCIAiC/IL5D6wreow=
     "], {{0, 587}, {421, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->{234.333333333334, Automatic},
   ImageSizeRaw->{421, 587},
   PlotRange->{{0, 421}, {0, 587}}]], "Input"],
 "\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
u0epMiTz3Gw4hhcptvohGmLhgD5HtUlMl32JqAwbGX5KgiiLXwNGWzkPTxcV
q20eJmMZ8X9YsHxU/6dvZFNzmaDib+g6ns4BiICAxM519Ld2zWJn7/DVixc9
zvhevXrXzfusxvkWaC79qVijAacH4JwFzskA/rZ6d3pm7l+pCK0obR3dPt4B
nh6+p13coqNiFUUVKWKtnGR/k3XeM5jSc/MLyiqOftYaqUkczhi3269kmD1m
mlXq2YsIubKyRwLtnt5BgR56jmeu448hJLscWtu7iAOZnJJLA3b7YJqfMYYk
X7z4zduNCllWQR6rWKRsgyo6F0ak1PG/ctYkLxms30Bwk7OuJ44lJC/peRNt
fEQaITmx5lcOLkT1ATxF79EhjjqBHzPrD8a2zOT/OhJ/81xv9/j9sJQ74YWO
F+NAc4s22rgcxUcHzRnwCAW/j+BAYNaLNuNgQaexc0yRTYpoZP6xWaJTiUVF
+alglxeUjt6+0FsPtC4+WuczVy7foL63/Xz+l9rw+Exze69oTU/hlGbVH/le
4zG5JRcWl0XEJGdll9DEF2fvk/2mHVbHrDz/4975VeQ8ajLV0VUTlawKwwZM
WtOE+B507klI/hdO35BFNiaCNm+rhT6ZOliKAUs5+AqvmC1NI5xX0izcaIYz
xPd7id6jNjKuYPBAVkyKkfZI6sk6p1cvnXvZ7HA5EwJjwec5aHz+6EAiGnqe
DfG/+0rrfg/cQ+CUF33ZIzxzvGVV4nkWAQls2w2CWVAESfnh/CS5mQxPTL58
E34u+IaT1tXdzQd3r72v8d9qW/sH7e19y8vbtKjNHZ7n320WTmCaFZ+ik0rL
6u0I+UPGJkF/gZa2/8p/nF11zCKs7dg4CJ2igqx209jcSAQNipB/5TTew7I3
Nh2oHSjETJyerZUkLG7w4UWL8LQLLtbB5Xq4Vgu36gPetM4sG3mmV0b5P22T
ol/kJIR2g0MEwBVs0NZc/lMGkqKht//TsKg79353DSAxuCfAGQA/CMiA4Oxn
SWPZjZuTq/jlAieayE6lUhw/sWWLy0uRnxOe/x6udXHTOp3u6x+2n83/WiMn
NTkBWlt72BgZciH9aAOXQGO3iKjPJMqurWuXGcDa+WDfbUd656UjeWDEO4I8
5PGN2qioNhvSZamodVhkoZQeQY04f2rY4XGrra4Vdt5Jgmj7ap4WjwhQz6wL
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
W61wtubUo670li2Ddcm0XZpX/V7iOfIc692jgG5q35A0z2ogpAYzkH75KUU9
HIEwEbdFxQ165gicqg3FEFIVt1BkXhTuthRC8eeghlyGkAg5VnY3a3ihYIr0
HmLk/SfUuMlpO7woQXABOBeDdy1okx5Ed+h1ZAmMaS+JyDIQaU36eJxV1BTo
0trmrQdPzgZff/36U1ZGTtjL39+/C3/55KW7o6un0xkPB2eCk6vzy0evCzsp
7tc2WZmdWxifXjCL6p/HgR6lUyoHBweR0TFv30bq9tUMkt2+x1go98Wsw6aG
Rids4nBc29Lh6yIq6ihWPLRVzWzASIWZVDBgL36j65NO+GKqFPsSN23c3cP5
hHQWsKLo8SZnWlMUbWIxuIQBPALNPfC8r30eE5iR+7gk5/T7eAgtBvdUcI+O
KBjXYxs0j+sj0bqJRLXKsR3SiM3mlPpIPLzZDdEpfAiCm7HqHVjzKLJRVcOw
AiOrlKiivoqKjcxRZJV3Yr91lJ2pzbzUUiTbaPNW3ib7iEqPxBmMeOvhTuAf
yhi5NwzvQkg+aHLAo5mA5OusIcRDEdffJNMuSwP2cZ8g4YP6HlRzMjzys4f3
2ctXbgf6XTjrd9bJ0VXr4HpG63ba4bSb9oyr1uVz9GfliNN4FCHtUPnrmSSv
b2z1Do4ZeRrFcCeMZsBznNyvP3z89O5d1OTkIr5mP+DftsNCtqKoM2EpAVIu
Ly9nZZrZpW1W5uBFzhZN87y1RvA1kiqJ1r+nTKaGtBSNMGmpBoY4PtaC9W1j
37wEd1uwcu2WCt6JTzO7Hlc3eSbmwe134HUXPN6D20s491vf5AJzblUI4STa
yse+gVe1byTewImX4qaQZx5IvMfaG28aVw2chXZS2/xAmdIuiRcqW3U8EMOp
92wDkxe91QENedebi3jrKcak22Tr5ijW+RGsKeaEyWVGTmZjJmoHVsAjGROS
Z/IgKKtras8iMzI6lV4nG2QUZOXr3WS2o0BWoLWz19//4oXgGwF+F4P8z997
9DQhKa20vDomOh5A4+CoPR98SaAlnqP3L7sn+auaJO/pDshBX9/ZU+iNkkVD
X30r8wLeh3/8EB5b39Cu2O+J32WqIO2fs7t1dXUapEQ6Ty+wtL/EsSm9Vni0
VcC3t3dXljeam9qKi8pysvPb2jpYce2rGWNmsu2npEIKC07JIpHXLaEb2b8p
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
Uk00uSAzUSyjyCvqQlrTz/4QIScD5LSLvOj/6GbHkqShwD4TiJCFnGw5BJuH
E98GyOFGcqDqj6YoW29ZwxiqEivMrZ1bKF4rhlRvsYGi5kqAmQzSdFqu8sy+
/mv/E9/EyH9i5HyEXIqSz3r3f+l/80bo49udP5THfmocfedW+K3vwx3dyTwL
22XmcGJDjDF5oOj91WIndd1N2xr60faguA5t8II0FUaFCyKrV7FEB175mqTR
c2ieMiigsakNVjWTYwuAp39icq62rp1xxYFqsanbuCorZspFx6xLJpOrrKgt
uV0+GBtGVSfoPJXl4hrozkHXqNAzKrT2rX5d0+OILTIjkJcMbUD673nnRB7G
Yx1rJacbyXutU6BKAUUcCZk1sqht+KTVPwN5uZI8bSPHGpriE6A2COqCsi4I
ePLh9DLGOLII/vQ0U/OYWlm93DJ1/Pse8kmEfDlGvholl2KHvgu/9VuguW8x
XQCaJXQJg70TYdizQt8QsrISqz5ohmtdpJ9rGsaiYpCKNkFlhtowDjvve98o
gMA7q/IVP4lbiAICnfB14KmwhpCieqeM5Hl8E4krUW8RMLJpbXeWlTfQk1+Q
Ctj0sKl/UWeW2doKs9ns8PDwzZK6GzcrU6s55J4USZRvD1hUw8w0I+gKUHNI
J9NaS3hxYE7tm8/UB2IZ8JJgSRcUOYvTCzX9xI9d5BUnea757NVwLL686cep
GNscsy3MP2TkHGifebKSHLk1tyyyGWosA8ysNLCqRCDZwK+wY1ZgKK1qTHBm
jsxMWvq6dZh86ief9pLP+sjn/eQ/vc/90vtLSzI6urx3XTyOfyiKO0aLIymc
10ytU2VtI+rwMKmdTVwAxZkoq2BNjaTd4b95q8LlCcCEK8Zgpxultn0JFwg7
jXI1mBGZdY1dd8+e+rnrhnMmsaok5zOsJpHD6BWTS45AirxUSV50kBN2fzyt
bkHJUTUtJJgt2WDKaTp5sYw8dYMcv64gI18yvBHG1QRGt8pykJCBhN+S9TwQ
x0fnxBLvwqFLLnLBSz7yks8HyPtd+y50vnW1t8I9nphMZwUNhj2Le9bH4/hn
4i5dpuJKoi4vreZu3akP98fZEwadewuwjvGYWs1WVteXV9THE6O6mYTcxrw9
s5Aw7R0ORoD50W1dS+TtJnKq+eMbfXM5MBQgEF1YgVcDY03JKPqrV4fIyWZy
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
zhIHx98AXTdQ/NRQqczwNGRJt7v9tY2t1Hvs7Iqwbms+oHBHA2sziqrHEyMt
bfbmVvv4xMxKOmf6jEAEEgsC15Pk4Hg4MDF/tH7UE5EkZX4xRSPr2rr2xib7
xOQ0czBRL1eXRL6+dhyKizKoTD42Pu32Bqrqmroi0YUlg09uRNy8+4mD4+Fg
jK1HhsjySoa6H9R1bLd5B6JDgihT8ygIeVyGCg+ydySK2Y/oSS6lVsprG8qr
62nEHRtMiqJszFATeSDAwfEQwAlc+Li3L0ZtI73V1DWlVtOGGIW5+viQ6x0K
9j1pJswn9OmFJX+op74RZoElhkZ5jYaD428BvMd8XghHBqpqGlraHJHe6Eo6
J6tS8ZKCpacxTh7HToNmqKWto+7T59LZQrCjm+53TS223r7BXEHmZpKD46FA
Td/4+KTX31HX0EKXUv9AXGYVayZcZozrYq9jijESj9F2Hkw2gvGTWqw+p8uK
PjIy43QGGpragt2RlVxh246Tg2MXIhzurattrK1v7uyKpLOCooJ5FDVLA0FF
ogiksBQu4bO7YDB8cNKNy+NvbG7vCQ+gLDmbYK6s8STZ69ncIckysKxyxzlC
HHsKqDiBN+2uoFgtFHLUp8AnRVGem132eTsddk99XXN/32BRllHVeDS9F8AG
3mBnoqJNTc93hLpb250etz8eH8pkcsaLWJGu+PVFz/DuRY69BuoDMDdAtuov
Znua5RMCBvrjAX9nW6vD4w4k4iNYpDbGunIFrT0C6wIwovClVLqvf7C+rqm1
xeawu1dSGfoslLnvHkGrc+0Ljr0LDJ1QTJWGTLIs4zxr/FdkfSzMp2ztzuTQ
WF9vjC4ThaUdZVnFhmsGXrbe9VAk2YqXZTaVUmPjKft6B5ub2pub7L2RwZVU
VhTUfD6P37hWVBMvLo5zcOwZYH7JCpNxpDUTl9DocpkYn0kOjft9IbvNralr
mjyaOTWvOM/PsatBd0hJEFELiG6UlpAd/W8oMeb1hHzeTno/GEvSywN9SPrN
40ZZvKtycOwlrGu/Lb7MR0cmXU5ffV1zMNA1M72AT4J2+NqL+aLYQ2BzNEAr
XtUwmjC2Pw2Y/7Kk93T3NdS31FQ30KA7mykYoTi4kWAqzY2Sb5ccexnoHFKv
YHxs2u3y0eCargtIQBn/imVNUBqki4h7j3sKJk8S7KQRGmD/FEiU40uiA4mG
+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
g4ODg4ODYzPw/14huq8=
     "], {{0, 398}, {438, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->{136.66666666666478`, Automatic},
   ImageSizeRaw->{438, 398},
   PlotRange->{{0, 438}, {0, 398}}]], "Input"],
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsfQ0oJesf/3N373X3/e5ud/feve1r+9K+dPd272132xUi5+R0iAiRzf5p
txV/4i8iOhLRiUhEIhGJRCKRRCLRSSSRSCLJ6XQ6zTRNM03zf15mxrC77m93
Waznc+eeHXPmzJlzzvN8nu/7905MUvC7EwCA/3cKPgT/n3TvlJT/kxHyI/zD
JyP1bcxJuGP4AYD/C/9H+zIFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF
BQUFBQXFsYQkCbIs4k3meV47LggcPAiflSSJHOF5UZZknuXgI9wkQdR20D66
lCQIAj4XvVCUWPgiUZTtduf8/OLU1Mzo6HhnZ3dpaVlaesb7uPiIiMiQkNDI
8MiIsIiggKCwkLD3b94GBga9fh2dkppWUlLa3Nw6NDQCX7u56RBERhR57VYh
XC4WXhzeFcvy5B55BFZ/Dv4gAnlK/RwUFBR7jB1zcwfg7GMYBs9BdRJi6hB5
gexoG4MxNzc3MDBkyc6LefPO5BdgNgWFhkQEBoSYTYH+5qDgoDD4J3wM8A/2
Mwf5+Jp8DWZ/czDcfLz9vDwNRoO/nzEAbvCF8GCAP3xhkMHX7O1lhDvweGaG
pad7YGZmzumErCISciC3ppIY+iwcx5Aj+kd4vspyFBQUewuFQ8gs4zgOSR0y
JgftDJGcI0IBQ52zylOzs/Pl5RXv3se9eunp/srrxXMP91feHu4Gg2+Ar4+/
j1cApAuTf7B/YCgUN+AGd8hm9EdbYGBESGg03AICwk1+wXCDL/T2Mnl5+sGX
+5tDAwPCzaYQuP/qhcHXO5BcFtIL5BaDrykpMRWKK4uLy5ocpd2qjDkQ/6kX
kygoKPYe+iUb7yA14RPyP5qeA/0jzU1t2Vm5YaGRUN7w8TZCAvn3n5dwmr98
7gvn+LN/PaDYAOWKyIhoeM67uKT0zJzyytqu7oHJqfm1DSfHI4oSpS1ZRntr
OOk16YIcWVld6+8frK9vTE5Kg/IJvDKkGsgzBp8go2+wp7sJkgkUdd7GxjU0
NK2vb6C7FLc+F/4TARIJy7qw6EVBQbEvkHTEQaaztg/nZl/fANQmgqAUATUR
bygGQJYI9DNCdSPg1Uuf5888PT2MUAiJfv22ob5leGicZaBaoaz+gqhskDe0
DZlVVJsMnNrSlmKF/iSbdgSeCZUUcksCLy8urPb3jRQXlUeEx2ABJhBukGFC
giOIEpSZkTM+Ni3LW59CVco+qbtRUFB8DRiG0QR+jUuIXbS5uTUyMsrXxy84
KDwoMAxKGkTpgBwCH6GuEfMmPj+vpLOjf2FhnUx8QkfalOewDoQnsCRIot6a
giUEaYeBRa9JSSrIn/BqkojNMqJiCsZPCjPTi4UFJYEBofB+QoKj4CO8PbgT
FhqVkZ49PTVPPhfLsvJ2tqSgoNhDaDTCsvzc3EJ1VV1oSISPt5/B1wx1E0gd
cG7CR7j6p6fldHb1zS+s6FUSImzwggsu+0TGILNVsbHI4kc3QZDgCYLmCCKH
dRrNDkD2gCfLqqEDP3BwE0XlPlZXNmqqG95Ev4OUAmmEGFXCw16/e5vQ3dU/
OzsvUkmEgmJ/QIyQcEa3tXUEBgY9f/7Sx9vo6eHj6x1s8AmJCHuba1HkDZ5D
s3WHUIFohBxRLBtkpgs8z2KXMa+XKPTCACdLnMDDDXOJKG6f5MSgseNO9Rwl
63QWItjAqyBNCt/T5oazqaErKCAqOCgyIjw65s17o8FcWGjt7e3fn2+RguJ7
g+bZhJMLCvP6aBBVQlAkEHjm7OxsZWVVcHCIh7u3r4/JzxgElQKPV355efmT
k9PE4ElepU1fVZzgSGzJDpsDca2SfY7jNF+JdlAz6moOFP0Nq25cIs/w2nH9
axWFSOfGJdCOy5jfllZXhoZHm5rbXkfHhYTGBARG+/gEp6ZkpiRn9PYMapSG
vcMiojJ5SwWDjzzmOnnLSKvcG9n/qH6k8xPtEL2UYBvG6UK+clESsKFZQres
OawRMeqsUpL28fWfnYLiG4DMwe0mU+VPMibVmYvCtxoamry9jHDzcPfx8vSF
csib6LddnX1I6tANYDJJ9ZfaAT0zkCPa1NvxQjI7yLOQZLRb0r9wl0+nP3PH
DWhMohzBzIDIZGW1uaUjMTndHBDy9OmLV+7ejx7//fDBn2mpmf39gw6HY5to
RSb4dr7SX1b7XB9+Ofo7+chNqtcnoXnoXYi5efun0Fhxx6t3vCkFxX5Dm54a
8JonbIWeinJzY0tk+Gv3l54GnyBPDyOUQCzZeRMTk1oEl/yxGa1NEG3a6qUC
7TQoAmmxo9rBHbPgw5miXQTSzOLiss02Be8HznTIdVBeamlpKy4uyczKTs/I
jH37Dm5Z2Rb4Z1xCcuy7+MjXMaHhUXCLio59F5eYkJQaEhYeFhGZmW1JSctM
y8gOCgn3Dwx5/sLj739ePnz018MHT6Hi9vD+k78fPY0MCX8b9Tr+TZw115qT
nVdYUGwtLsux5L+LjSu2llZX11qtRbW19d3dvXCDt7S56Vhf39iFTjUW0ZzX
2Ie+k4E13vuQmnaYl2VKIxQHgY+IDZBBeAE+bK5vJsYnmoz+vt5GH0+jyS+4
tKR6aWmdmDexR0PEEr2oCyxXJXN8kDhk9UoNtlrImnyuAU4oqFQtLa0MD4/2
9PQNDAzBR0gL5eUVVVU1FRWVcL+jo6uxsbm+vrG5uRUeLyutgVuRtSI/rwRu
ORZrRnou3NJSLVmZ+eQxMyPvTXRccFBkSHBUUFBkYGAE3AICwuHm7x9GNrM5
1NPTL+r1+7DwmNdv3gWHRsYnpkZExXgZzEZT4L27jy9fvHLxzMUr5y5f+vkc
3K5fufXP05c+Pv6hr98aAkJfeBiiIt8mJ2QkJqSnJGfBDb51elpOQnxazJv4
t7GJ798lxMclJcQnJyelQQauKK9ubmrraO+ZmpqCeuLGxsZHeVKjDhLpp37b
JOlAI3Di4+a2BQ9TpYbiG2KHVQGOWJfLhZ+QN9bW4EIbEx3j623wM5j9TYG5
lvzNDSdxs+oVc02WgINZ1kWBYoFBOQeKPBsbm3NzC6Oj45AcbBMz3V39Lc3t
ba2dnR29cEI11DeXlVaWllTAKQY3uAO34qIyuJWXVVkLS+AOPKG2pqGmur6q
shbuwNNKiqsKC8rgVpBfCjnEkl2YnVUAaaSivA7+CYmlsqIe8h78s6O9D24t
rZ3tHb09vUODQ+OjY1MTtlnb5BzchoYm+/pG5+ZXllY2Vtcdq+t2KIhtOpjl
DbuLEeCtJsQlPbz98NLpi1fPXvz9/OVLZy/9+eifyur6noHRroGRwpKKwoKS
PEshJJDUlOzkpEyyA2nk3duk+LhUuEGGgVvc+xS4weNwgztvY+Pi3idCbklK
TIUkk5dbCL+N6al5LMBsC8jB3/NOpUYftP9RmWR/Rg0FxU7sMM3JmBb6eofg
qA4JDg/wDw4MCIHqwPT0rKwzApAzNWmc5TnNCzO3MD81M213OQeHh+obW9va
u+G07esfGRgcg1tv33BnVz/c4HE4qeEJdQ0tzS0djU1tpeXVBfnFcD5aC0sr
ymuamyDJdDU1ttXXNdfVNvX3jbS2dLa3dU9Nzk/a5ibGZ9bXHPDdnU7GbndC
MUabNC6XEoSvn4aiGrNPglJ4UYCbZibdYZ8gNhnIiuRZYjReW17LTE6/cuHy
xdPnr569cPH02cL8fPJ1bTmz8buTi8C7gtoWZM7BweGG+pbamsbSkkpLdj4x
2yYlQiZJiYM88x49xiekk52ExAy4n5aaCbklIz0bEuzQ4BjklsWFVXmn8KYI
IXq6+JQ9ioJi/6B3jjAMylCz2+3t7e0BQWF+5iAo28e8jRseGSOzhBO2sk7I
yzVrxtoG1H4c8wtLkEd6+wa6obwxOd3XPzg1vTAzuzQ7tzw9swh34HIPN7gz
YZsan5icmZ1fXl1bXFpZWFyGL2dYnkxnvb4DZ4kWb499vWhH773VXCF6Fwk+
WVCNJ4qYhI0wHIqDxUoBsl1ibUtTx8gRvWpGaEf/SYsKrSaj6fLZs5fOnLl0
7mx7c5PAsxzrkhUt47/tEsQGQjQ4KPksLK1BoQgyapYl/318MtygPpWQlJaa
ng23zOy89Mwc+GdicnpcQkpCYlJRUXFf38DK6po+DcHpdGpkorfxUlB8MxC1
Gj52d3fHxsZ6enpCrT8kNBrKCUS8V8NKt5ywWhwYnHoOx6bDxdud3PqmEzs7
1snKzHISXPE/jDz9MJjkg6BUWe+WlT/mUZJ1nl9ZFZC0I9qfGr2ot73lKiWb
atgUWdalnUzUB/hIaAfzjGYRRdfv6OiKiog6d/rcqxfuUOpA8hgnCB/MXc0i
Cq9DrBn60H1EZag4wpZQRFjLyTI220JbW6+1qDI9Iy8Zakkp2YlJmUnJWVAD
gupPakoG2TQzy8TExPr6uvammqN5r0YIBQWBXrPWxhiu8oFG/8L8SmJCqreX
ydPdZDKGh0VEl5RVQR5QRXW4lLtojskO5ObmwUk9O7O4HxfXx9RtbGz09/fX
1NQkJqelZWRDyQRKLJBhUlJz38elJyRa3r5PTEnLglph/8AIIXNCUMTE/bHo
FAQc5MNrIS7acc2PTKUaCj2ITI6WVZwtQoYo1mLQY29vf2zM+1cvvbw8/SCT
ZKTnDg1PLCytEg5R8+ZoqtoWiEwCNYupyTktJn/PJ50+JgROdmKr4bEwB2U/
yBhVNQ15+aXv41ITErPi4jMSk7KhxAL/jItPKy2rHR6eIlYdHLLL4ctoXh6l
MAKu3cRrT2nvRZiEijQUO0AIRNYJ/OTPgYEho8Fs8DX7GQMCA0LbWjtRfTB9
AJSonUxpZAtwli2vrPb2DMrSVrjvfkCvzenynpFuSCgFUn1Pz3BBYfnbd8nx
CenpGQWpaXlJyRb4mAxVocS0xoZWh53B6ptElgNSXUr9INyHVeDE7di/T0dx
hKAp5mq8geKMqKioDPBHxcQgh7x7mzA2OondtRyJO9OUfWXIiXRhUkDm9fi4
rbKyijiJ9nbV3uKN7ZF7WkwOwzjJCdtjYuXVtfXurv4ia2laahb2B2VA2TI9
LRvu5+dZ4VPra3bt+nBlUXdcH01S+FSULMVxhUh0ZI5jSGTI0tKS1VoUEhxu
8guIioxpamxzOTliL9H4YivmXKuCSIFBKhpNT89CWU4TRfa2zNGHEfufAuIY
mSNBgBoVwLva2NgcH5uC7JGclJaZkQPFktSU7ByLFT4ODg47HC715cKO0DXt
BjQm2cPPRXGUsS1kfXFxOT4uyWxCNXzCw14P9I+Qk9Rg9S33h7SjygeFAvQ1
zs3NQb1Gq5+2hzSidzAp74ezivTnaO7vnXemKiLIJ4VdbKvrG719Q0UlFYlJ
me/epyATCnb3QOEEUg3hDyhTaa/dEQ1LlRqKHYAjYtI2m5GeDbWY4KDwqMi3
nR29spptit2RInaJ8jiIYhuNSB96NI8rSGA/LuKkhbLw8l7bjj70cUM1ZAe3
qL7dbXHFW1fQ2bh4QXIxwtDweE5eIQmBy8rMhWQCxZWhwTGHnYHnfRjPRkGh
gYxGjhNaW9sTE1IC/EMgjeTmFE3ZllmGjBk4C3isI2NDnuYl1AiEFHinUEBy
iNDMdToZ/ZG9hababMtHRtiWU7M9BFcgDTvgRuJ24I/H8hwJ1yElDsbHZnu6
h3JzCtNSs+CWEJ8CV5bMDAskRi0ikeLYggSHaMOAeGeQgRQfKCgt8PQzPPc0
+BjDu7oGN1XtmOJ4Ao6V1raO5NSMhKS0dwkpSWmW98kZDS0dI7ZpVpIVCkIL
Cq9mPWgQVGvbtnIuHyZWUBxpaKIp+Vkhn9TVN3r4Gl94GT18zEVlNfiHP+Cb
pDhAoOmPo1AYVlxaWS+rqoNMEpeU9jY++X1SSlxy6tDwKBJgdIqVZoklniN9
qLB2wod1JyiOHHakzslq5l1SepKPX8CzlyZPn5CC4nK40KAMMkojxxU4DhHJ
osRsAh8hmcCdpvauzNz81CxLYnJaQlJqSlrmwtIqaU8m78w+UMpg6k3B2+PZ
KI4qdMHPMjHsw9+9tLT0hbc3FEL8g2Iqa9qVfg2SzDFUBT62UArCIKO6LqOH
xAvZJqdz8gqTUtKTUzPjE1Nz84va27oZFylHIMu6WhDyx1w5NPD1qEPjEC1g
qa9vwGwO8PYLCX8dNzQ2tWFXjKgCJ1Jp5BhDiSMiqYLEDCvpnMVQMukfGCmv
rCXJxZbswpLiqknbnK5nh4gTsii+W5CVAiqpjQ0tkRHRr156GUyRAyM2TBu8
wLNYTKU67DEGccDphApIIw7GpZcriKsfKjXFpRXpGQXZFmtGZn5+YfHo2AQn
8ILES9sd3FrMCZVGvgOQuKOF+ZW8XKvR4O/pYYRbU1Mn6g6DPJJKnykcmER1
2GMKpcqu9EG8mSQ7Nu1bp6nbwtJaVU1DliU/OTUjJS2zsrpucmqOF1CdE33c
Ps3B+Z4g8HKOpYBk7Pqbwgvyyom8ipLIWE7CtXpQGAhNtTu2UMKBth1TlBk1
XBnJKrjIDMsz5Njc/GKBtQTqOKlpOXArKq6Zm5uDTLJ1VSqHHCmQbE1S45c4
8ZVIafx719XVvXrp6e5u8PUNqKqp33A5/+t6FBS7g5hkkaw7PDxKUv+Sk9KT
EizNUNAlASYSi8NguU8JI1RIOYRQC/kq0YxaEu746JjB1/TsX49nzzybm7s4
XpSo1EHxtVASJZQEIlEeHbFlpFtSUzIhn2RmWHp6+khWDgHDMCQajfy5r4UU
KL4GavAPsbcrP9PgUG9sbKyHu+Hvp+5VVY1K+TJqA6H4WmyLGIE0AhXnzQ1n
fX19aWkZ1KCTEjNyLNbxsWm1qokCLYyEGkwOLbBxbKv06NjoZNTr8GfPXkSE
xxRZK2RJqe3JCZRGKL4KcIDpswK1wvtw+G1ublZW1GRm5MENMsnw0DiOYxX0
sWpY0+EliXoGDy1EkjgzMjwR8+adu4eXj69fc0sHx+pS/qndi2KPIOq6oBKQ
/e6u/rTUzEwokmTnWwtLtS4b219Kl7PDhR0iosPhinuf6OHu42sw5xUUo8J6
kqgLRaM8QvG10Pp0EKhpF4hGiCUEPtvfP5ifV5SakpmVmdPY0IKao+leTotw
HjZo3e6Is766qs79lbfREPguLmlpZZ1DyZnaTwaFS26XS1FQ/Cd0hVu1io6i
Vo0TP6P8abNNleIegjmWgoL84vGxKbXxkKRVA6Y4PCA5d/Cxo6PLaDB7evhC
GhmzzfKCkiJBQlXxj0sLAlDsDbTi3lqFeVnN3pIVBQc9VV3VaC0shwoOZJKe
7gHixKEpe58LfWjf11xH37xJ3q7L4MLLzPr6emREtPsrX18ff1LHjILiwAEF
kA2HvaauMSfPaskpKq+oX17dhDOB5RlSxoSY/bE4fdD3eohBBD/y+JXVLDUO
F9UecJoYubi4kJVt8fFGzWXqapvsm1TqoDgUIIl+DMv3D4wUWEuzLPml5dUd
nX2k1zPZiAyzo8AsxUeh55A9cZ2Lui66SUlJAf7BL557pSRnEdcMBcVhAOEQ
+OhiuLFxW3NLByQTS25hS2unbXJaqUiwrbcFxW7QJzx+GY3oNUp989za2lqD
r8nkF2g2hdgmZmVdQysKisMArfMyz4vTU/OFBSVFJRU5eYULS6scr7X7VMLs
KT4EMX7qI3C+MisfNV5UWxTBx9HR0eDgELMpyN8c2tTYxjIifkdKIxSHArqa
wFutc2wTM/mFJSVlVVmWvOGRMbI+av3XKD6EZhrd3Nz8mmBgcp0d3YjgwfiE
RH9zkJenX011kyRSBZPicIFUUySOm62EL1keGbVVVNWWlFXm5hc0NDSR2owU
u8Nms42Pj+ttpJ97hR0WWiLkNDU1BQaEGA3+6Wk5ah9q0miAmkcoDgm27IGq
HI46NpI6BKNjE5bcvJyc3NraepeLpYl7nwKc0UtLS/n5+e3t7bKSU/Al35Um
ZhBdBv5ZXFwcFRXlbw6Oiny7tuoUBcz8gotqNBSHB2oHCv2YR40q1GpJcl//
YF5uobWwpKqylrQVpvgQXZ19RdZSq7VoehoZP3n+C6tCkYZoEipcJnIC29zW
avIPDgiI9DMG9PeNkGQZ3LhN3Kd2SxQUew6tCFJ1bWN2XrElv2xs3EbaRMNl
UeBJf0ZRElnpEzjoT/CNUFhQnJtTMDo6rrRSFb/QjYLTrBUP7/Laauy7937m
ILM5vLysGnW7Q2ViSNURiRT63uOPQUGxp1CKtcpKLy27k6trasvMsebkWbt7
BhlWVwlWRGxyzGmkvb2zs7NbtVejI19sBcVRbOi1hUWlRr8Af/+wzKwCntvq
zY07hmi1RygoDi/U/npwYoiSEl4i1jW05OWX5+WXTk7NyTg8m4TZa9Gbx5ZG
iBAiY43ja1y9+JuEL+f7+vqgHOLnFxoTmzg3v6I+e1y+T4rvCCKubuEiJV6h
+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
P58+f/rML+cv/Go0Ba5tbH7PWo0amCGrFE2KY4+NTxdYSyCTbDpciNqxMerb
63fkHVdXVw2+Jm8vY16uFR+mNHJYQQrnYvGWtHllZN7NowqczQJusf/GjSN9
BhlOsf0T6irwDME5syp5lzlAyDQIngWPGsG1MvBbPbjbDJ7k2olMg/LyNmVW
KcuoLG28rhiIRBQo3KFbUPa5Xeur7Yhg/PvvfyGTXL92f3PTQXgDSx2suk9K
Y/FEy9bmAikXOTw4dPuPm/dvPfD3C5IV2wCqhvT7H7d++eW3wMCI6trGxeW1
dfunM46POiQUm6FPO5LUn6iyttGSWwC/DZREiWLSDiyVYHFx0cfbCKWRpsY2
rJlSGjmkUGsBiahaKaYRl8SdcK8AZ9PBTwnP39tkKFxg7YOV0X+yYHfgScew
YlDd+o/xduA1Cq43gusV4PfSV2lDqJGSwCrpMaivmajKz8h1iMrwkoYAyKBK
svM4xB8issbuXuJbq2NGTgsJCb1589bN6w9cTuw3JmygBMNva7hJnC94hyPl
eTbW1u5cvwOlkX+ePie+Zgn3c3n+wuPx4+fd3SPkJjedjk/ezVGHJCtVWtV+
giQdCf4ii6ubkEbyCoombFPSAZmaiTlrYmLSy9PP4BswMzNHg80OO5TcfWTt
xNIAA57lgjNJ4IeYh/FTuMcEsokggwOP3C+4UAi2pfNsZqvzJFRtPDrB7Qpw
t7iyewVOVTwxOYUm9gikXwlWTJS+A2ZzwN27D2/fuk8Kv8uqoLL7sGd5jpDa
nVt3fr/6x60bd5A5iGdlXujp7b946eqF81eyswokMpK/89CRT6K1pcNaWJKb
U0jqGn2YAUdsJvsd19fZ2e3tZfIzBh2quDiKjwNrxjKmESyasOBpLriQCU4l
PkyclbEvmAgqKC5LJDVZyaji12XZVL4JQlbArWrwW/W/8TNY8HRiUYTZw0Gm
Sw9XUtpNJv/bt+7dvHF3empe1nmE9ZUBPoSoFtW4dePW+bMXf710lZAePNLb
N/Dzz6d+PXv57h93VpfX7XbnwuzC3n2CowG1L4xcVlqZY8kfH5vSDsJvVZ9g
+w00ncysbCiKmPyC1Xvb7zek+EogFVgSSK4vD+5bwS/ZUK+5ETNKLK9o3ZHU
BGBsiMUaDtzn2myOG4mr4EkzuFMNHreYMlH8EgpqknD02Z6C0AhZBwMCAq//
cQvSSHtbtyxrvkuJFAf41BU0Gnn88Mnli1cu/XJFs420dbSfdnP71e30lZ/P
er3wcPfwjktI2dv7PyqAq//c7BKkEUt2Hu7NoUxgfUrLvtIIuTb8if3NoSRQ
WaY0coihRgZifUGAqjGyUIJbReBcBnBLdPNrIklzqPSQRFy0pOU08rDgmAwU
cFI46kIxabcKUZ7vk+qo0nm1dMgeC72k8jBxH7x5E/PHtZu3bt7LysxxuZTI
sf+sl0i8zHDHZDRdu3rjwplL8zOL2EAgRkVFnP7R7fJJt+unL7qd+CkhKbW1
rWtv7/+ogCgRRdbSlOT0sdFJvWv4o/Wg9hyERnx9jUGBEZERsfv0LhR7BknY
KjmIzJ+8wMvgTik4nwlOvgf/FJG4cVJbDNlQRNzVhtQ8FJVpCWWOV9YlZGt9
WA4elwHvtjabS+bX9nD5IOq5WsAcDeD8/IKbN+7cvnU/wD9Yq+dMzLC704iE
r1CQV/D7letXLv1RVV4Lr1qUl/Pg/r2LZy788uOZcz+cunn9tnBc3QKaS2t6
ejY3p8BaWCqrpifCIRp77J9tBL6Vy+WC0ojZFJKUmCEfpspsFB+DEniGBg+h
EVFGhYmu5ICfE8DTPFkifhABe3FxVgyKoxZxTXlIMQyugCossNLdlCXwrAeV
CHhS+fvrTjwW92yYaS2hifgE93t6+u7eeXDn9oO/nj7TGlpp7t1PXQdHRyCt
Z2567sql369dvWU2BnZ19v1+8eK5n8/8ceX6mZPnfvn54pPHf0vql3Oc0VDf
nJaaNTRoI3/u0Gj2TxqBP+bMzExgYBBUamqqm2QlCHmf3o3i67EVfibzIo4T
k8A/VYhGzqeCZ1ZifUXHRZ6cQXJsGNRLj+dEOzHQcjLTOLIB3s8B4wB4Wgt8
+0Or13ZJ/P9c6GpvKjSyurZ+D6fxwsfu7l59VMkuNEIyfLESI0MOuXThNyiQ
eLh7P7r96PIvV8NDoq9funHG7ewfN27zSvj+8QTyiMFvaWPdkZ6WY8kqWl5e
3vb0/tduHRsb8/cPjAiPsU3M79+7UOwNcP12lUZIpLoIXtWAS+ngl/STr0px
qVSBV2gEp8Yo0R6iyLjgX05eCQOFr8zsWAXRM8BzAPhNgtCpjKq5Pb9fksxL
6OL+vcf37sLt0evX0UTk/k+fL/x0nECMw/LTx8/++O3u9d/vXPn12i9nr3m8
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
4ok0kkgXH0RaZFNKwabC/wHJ/Zim
     "], {{0, 325}, {365, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->{141.6666666666654, Automatic},
   ImageSizeRaw->{365, 325},
   PlotRange->{{0, 365}, {0, 325}}]], "Input"],
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsvQtIG/n6Pv6ePee7Z8/Zs3vOLntr6ZVe6IW2tEtb2qKiqLS0xdLSlpaW
9tdiabEo+hdFSYhIQoIYlJBgCIagKKKIEhRRRBRRRBFRRJSgiCgiCSGEGYZh
hmH+n8tkHG11d22tt3l2Nh2TSTJJZp55r8979FXW/TdfAcD/9w26uf//8hNz
cv5fwYN/oD+SCnLTX/0drST8DaAQ/Y/XZR1fChIBXRcJ0IogSGhBq3RBj2uX
Db0Lfh36suSVMbRvrUOHjt0NQeBEkae3iGwkSYitKBBjEAjQIzKihw8XHTp0
6FgXWqtGuyKtAe0TtXS01lPWel/KXbp5o0PH3gE2V9ZYUbGKVT4KrZmDHC91
Id6YRFwx3RTSoWNPQzUreF5UVzCpEFLgWGlxITQxPt3fN9zR3tPi76hv8KOl
obGlqbmt2d/ub+loae1sbetCK2hB96AFPYSWxqZWtIyNByYmZwIz83MLwWCY
YVjkthFvbKPxHx06dOxQLC2GoxFuOjCP+KSnewDxSZWvFi2Vno8v3pomX21z
dX1LXVN7Y0tXc1tPS0d/a+eA39+FlubmTrQ0NXU0NrajpaGhDa2jBd2JHm1t
7Wlr621v7+vo6O/u7u3rGxgZGQsEZhANqVynQ4eOLYc2uIGdHUkWBVn1bIj7
I5JF2ZiGROifosgjcyIU4eYXw4GZhc6ufmeF11bqQLflDq/HU1tV1YiWyso6
tO711ldXN/l8ePF6G10VteWOKqerprra39TU1T8yPjA6MTIRmJiZC8wvzgXD
ixF2KcpNzy4gA2ZmbnF+MYRuR0Yne/uGenoHJ6fmhoYnuroH2jt6Ozr70NLW
3tPs70D7gBb0J72/p3cIbTY+MYOei/ZTEFcFoUXV+yI5MtWnUz+vvDL+o3OX
Dh2fCo7j1LiKGkXheV6SBJpRQuvqxgIvz04vdHcN1Nc1l5Y5iy0lpmKrxWZH
6/ZyV5mjwllRWe70uNy+Ck+Vu7LaW1WHXCTEDMMjkxOTiEuWOMxSK2My0seX
VZshukDP5QWJPgWtoIVuiVYYlkdeFSKowaGxjs5e5Iihpa29u72jp7Wtu6UV
/4nICm3AC6vjPOqnptxCeUZLrZR1ecUhlNWN9XC0Dh1/EjwBPWUQ5/A8SzPX
WpMGIRplF+aDXZ19ZXaXyWizWVz2Em+xyYGoxlZajnimxO5wuDz1Df6u7v6B
wdHA1FxwKYJ4admMEDBNsTwjygLlEkQVvMjRP9faPcwwkqjGhNWwMMcxaCcp
GdKFJtkpCyFSogvLCUuhyNzCImKb7p7B3r5hZPkg2qEOGlqGR8bQNlLsjeiO
ob2iXwtiYMIkYoxyWe2+0fS9TjU6dKwPEV+lWe3pQ88delpRnqH1chMTUy6n
Jy/XkJ2Vj5bCAnNxUWmJtaLc7nW7atvbOwOBGXq1VyO0q0K19HVWnZToT8Q1
qqVA09YrbYlV26924lSeUdkALSzLapNf2pQ5WlhOmlsIjYxO9fSMtLX1NjV1
tLb2IPJBXhjy0SJRlmS7sMWkJsti7yiuol91l9bPqenQoSPGKqtBS3PHxia8
ldXFRVZEMu8zcjLeZWdlFmS+zy0sKKpweTs7epHpEokwq2Kw9Ln0VnPnitN2
7fNSXH+hFpdaNLjyfSVKVto70T3EVFMcQJZHHpig9cjmF0OjY1P+lk5k9qBb
utLe0Ts4ND47v7SKHlV3Sa3n0T6kdTN16NDxUZATh6xJ8nRgvr2tB3lDmdl5
797n5OYb32Zkv37zPjM7PzOr0OnwDA6MScsnGQliCFHlj4/5FJQEOAIa7tCW
/KGHNK7KH1f9rQMtv31gk6ifdNk31D5E/C1pZm6+rb27sbG9ra2/rW2wuamv
xd/R1zuEvhOW5WP7jKNb2k/3Z/ZNhw4d6rkSXIq0tXabi0veZ+RlvMvNyMTL
m3dZ77PyzNbSpua2mbnFj51Xir2x8jWXwbOcwPHSB0kg1T75wHT5ePUvpSNK
XCvi2B+GmDVh3w9faqXlo7zp6vCUJEfC3MhwoKO9z9/cXlvTWOmprvLVtrd1
T4xPRyOcRAhHy5m6D6VDxx+CYbj+/kF7qePd26z01xmIajIzCt+mY54psTsH
Bkc5fmURb4wNPnqKUTZQ/8QbkKjtCh6g92wI6PzmEHtxAvXUEAN9vKlqdWhI
+piRQ/0guvBCjC/V3DeN/wQCiz3dw9VV9S5npcddVVPdUFNd7/PW9PT0BAIB
1XXSo8Q6dj208UnVE5Fj3QHk3Oc+jMzQvE53V7/H7Xv1IjP9VfbbN9kZ77Lf
Z+Tk5Rb6fNXj45Nb8nG2IWhICt0OD4/W1zd6vVVud2VZWbmnoq7K2+Tz1iO/
MratYh3Rih3Na6yOKuvQsROxTkyDEpFMUtuEjfAtWp+bX2ht6UTGDOKWt28y
X73MeP7szZv0906HZ2pylj5Xr7xVoSbXqPGCbgOBmfb2TpfTh6jGXeFD7hU2
sWS5tbW1urqarsskAad5Ed3s0bHjoT2MEZMwDMOyUZqpUR9CfgfuSOI4dDoY
jKbMrOzcnAJEL8hvev3qfV6uoad7gLoeNDSyFZ9j++JD4kUUjtxP9I1NTswM
DY4FpubQnZEI8/TpM7RU+mpogIu6j7giiBc5Qc9V6djxUGVhtJWuK/wmSZ6f
C9ZUN2Rl5qIlOysv410WWtAKJRn1eatqZb/YR9jm0LIvVeuiISP6p1pQhNYt
Fuvr9Df2cldbe/fo2FRgZj4UYWhtoc7gOnY0tNHalYUfSvAWXX8H+kcKC4pe
v3qX+T737ZvsN+lZOdkFFa7K6elZGt6MRsOqCIz6dJ1tVuGj9t7S0tKqh1iW
b2vr6OjsRVQzOTU7PDKBGIf2VjCsbtvo2MFYqxAFWf4zM3M9PX3UjHn3Nuv5
s9eIcHze+vGxWTVfE8v58uoraHNJepWaCm34XZt8j9UtKz8B/caQ5ROO8vQ7
RlTT2zcwMRmgvWA6dOx0aI9/Wsva1dn37OnLF89fP3/26tXLNy9fpJfZnSPD
Ezh6o3lWbFVUn6jSjh66+UNQ11VN/NFMOstGqQ+rulocx01NTU1OTobD4a3d
YR06PhFa22ZxcbGjo8PtdiNL5snjF69evn3xPL2hvnl2egELR+CTgCeWDG59
YhhGptHjD7iFBoG++EfZvtAaNqq7qtI1LSrmOEatEqTfnhpJQzQ+NTUxNjay
NXuvQ8eGoLY506ozuk55A5kuebmGVy8zHj96+ezZ87z8go6OLobhkFelLb/5
LNCW93zMj+NjIxUEai+h83FVHaB6Pmq0Hba7zt4qw08tbP4zHRaRSCQQCPz5
7XXo2CrQU5KWyqg9ibEqMnzr97e+Sc9Alsyzp6/evsmsra2nSVvVddqkQ1pb
UYzAsqx2h+WYg6blGWoJrNof9XW259knKT2ky1I/WnH1D/Gh9Dr6ExGOzjY6
tj+ovsqqO/GJzMksI1a4Kl++SE9//S7jXVZpSXlrSycdz0Sxqc07q9gmEmUD
07Nj45Mjo+Pzi0uCKNN0DDWraGRDNcm0vdvb/OzTVkjKsUDZWtShEuyHDaE6
2+jY/tB6HKp6TCgUqav1v8/IuX/v8bu3WSW2st6eQbWqgzhQeEWjtPDZaGct
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
LxTe7c3VgKkG33P0hs5mXbu0bf2Sa8p+ovQh5lNcbHJDfTNhGzI3XNYx2HtX
AUmYMHRkLD1/+tnHqcQ8iVzXohKQIXshoZgjJBxPdtlck1FCvdL4Ni3nh7eM
bRCDYd08SCSjJ6+WAgAXf5WBD4Q56AhT8CIUFBUubAIoWfiDxjYIaKQvH1G6
pSDfB8XY2vmbhdTJrMVDyUHwbvbrN5MBDt8yNOwyBFHJJzTrzIaWju34DlVi
QsQDNOHzzIwcSDjQwkEREYZT8uN7zqqRIcqRXkdpzVx8tqOkTlIaS1W2EXlZ
cAE+D5i7xyrr4CVP6oolUnOydXKFpKKAzI4bvnizEIBK8E1E3ymxIr8SpLwr
zGoI+ncqk0cikb8lnP0OlkR6OYFEyZBjy6JYliMo3iijb9UGjqT4wdP+j/Wo
75w+IDu9j4GDNuisRNPAdea2tm2J3EZZ+DKfTE1aE+KTP8UlhYIU0aVU19yO
DfinUCpvmdaeyeRsZ3M7qUwjKWDSi0TiGRKh1mDQZjBJFB2WFEE8SZK2tAMN
TVcRUDvt9IPn0LCpAIeCLRYcQkHVLALNRFaDkHP4MAWXYDAYHaU/QGzD47ZK
hpxXhNsFnq6b5sD7qa+TXeDNIHjcMbKEujS1cVJ7ALIntRqKQE+qtdWyzvff
Kij31rWf/FNcIrRt2ts+s6b2LNvQWGjOV6XvfRPnqDNgk1DW5pVbjqJr1STB
MzIRdi+HiPUuSqqRsyXAmSKBQVNvpYUPn2pQ6clhqqVr7YcTJSociYTCkHag
kXNQ2QaHyiWiiiwI6ows6WSmFTzsAXeGwFXd48pZThbM2Te16wcVpNiG4ViP
1wfZRqc3wdNyOy55ZVyvHASGz7Nzct+9/Rj/KRm1IDF7Ow8pytGP8cTskScx
9uJaCYe71ZpYUjMsP8fHlPasBNxecn7DP6QFfgvZRsCchgYKCJIzJa0dnOj4
6iyjt5DqF1n4TgnaRDj2IHtSyqmKey1QJbNpwof0Qn/WgbM14EzDuJfGk2zg
r6P1eu8yyHhclucc84vEtlFvglsILFsty7qRBWJ6ejo5KRM6Uyu+Dceu7RUI
chXt9Kcs64N3c+klOK2sdAWi0lgeuVQoniKQij74OhVEMQQRk/nWVvdhQW8B
9wxInqzsiaOXp45ccxfVR6Xb5b4JuXvigEaJiUnJ42JklNfGHWrXMibAuRpw
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
Wgd3MiJGHLff9cakbvT5IkkyKr3eyNwannJcvOc+d3P04kNCQYiOkMUoHgTF
CQ37CzjrRE7PZr2xpdX8eY3NHgQRt5Gys/LTUvJSkrNWfEGaljUxBFljfIdA
bC3i68l+Dccz4Y27/+DFzqJgk99uDz55H7gbE3F6BRKDofHIc55z5Vc5bvy5
mlYp2BbpZT8y3nyrgm8Fy3vTy3+kuXSmTbZnPduMTSO2OXvjr2xD+sQ1aNg5
iPLDrHWusdkwOja9xxvzscoWukwWF9zJSZmJCanVVfVoYCUuGVJSwEoVyjZD
bjUm01LUQMrGB5DH3g50uKCNM//sI/swlhu3EcFKSAJISsKzvBCXvfx7PNdg
prwrEsPLRfhoaDULbSd7TI5zZHyz7RHlhmiyJdzErO3iXcQ2Fx6ICttgZ2o3
c3kavmTAW6G+pa2+Ue9fJfflPXoefuYfwW3WtcZ+TEhJznAuLROTTOUZcUfa
w9dTiygpDZF/D2SooKEuKNdtS8sP/JHorTEgxQm5pZAPm/rmnsRP/v6RHZpi
IIeiSVIk2sNzeDLvbH5VyOXdbHui2Qb+6fQcYpvTv/2VbXa3VEnDlwl4kXp9
gYYmQ2/fkOLK7+keGoYhisTIHYiLTUhOSqurbUKBVpaPbgwnaf1txTrhLFKI
uBnLiVJYiOAwk7Q6NTOXlj/9LjVY3y4NTErjVl+tfv55gv9ZsiOnbMUxL+Jh
UnIPFHZ3ocPo7x7Z/FaA2EYQVbaRrPOzF+54Tl4f++k+6Xcj26xVEmvYFcBz
H/JMe3t3IEixJGK8V/uDeZ5Vr2VSC9TfP5iYkJKUmNFl6VtX+bzznsJ/tBbg
CkHUqozMGOhABUcnbK9SFp8lBV589Dx5G3z6IXD3ne1RTKhvhNAF7oyQKDwd
Cf4v6PWLHt8mnhoZxCOzDXl0LE1euE3YBr8ls41GNhp2BQ77UkureWx8RvEL
9m5ZO9YslacGkxfg/4uLypISsj7FpUiKjujO587Ez5eNwDCUzJUiljcXBOhJ
LcVnBx6/Yx7F+O68mX+d6NO1SxRN4Spl1GjAEOcIxZL9C06JiIhuAHkIOBbs
kssiF12IbU5cGzt7T9LYRsOuAjojHeZus7nX61sV5UL4vexGybMRlawZCgh7
3CuJ8ZmJCenW2Xk1m7aThEOua7LAa5nlNzyAqOKFJM3IBAReXLVag12Wlcwy
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
rr2+obWhsa2isspk6vB4ltUvkjTPSMO+x+eZC1HyLQfGRqerahpKy6sqqmpr
65vKKqobmvTEjFfjyeqEEMI5G/pZMsPI2pKiqt2/P0FiI+saGJV6g7We2SiJ
abmQBqlqsnT0X7ldvqHBsdb2DrgYjO06QytZ2s2WoeEJ+HkMI3+L5sZqOBgg
AUZJUoQp1mTPebfXo28xFpWUVtXUV1bXl5TWQFOnsKB8atIuCnJFKwG+WXNq
6pzEhdCHKRXy627K+8gp+1tzgpg0hHbW5exCoVXMKoJs2qlv4agvw7F2x8LA
4Gj/wKjFMtDaatEbzEZjp87QBjlnYnLavxokk8Uk9ReJwj46bho0/C2i78VE
Hhk/laMB8GLyuFfMpq7Kitqy0prqqsaqyobystr6umZ4a0YVZdiHiurkip47
s1ERyL6/U29kbEQXLCnledJqIDw2Pm1sMzfrjfqW9pZWM1x0ehOimpYO+9wS
yyBmVvoUOEhT8If4vFRP/XANGg4ayPBxspDTHj5OTEzV1zXVVNeXl1VD8mmo
N8Clphq+0rQw7/Kt+NWY57rRM8pMT7kQaN/VgUTXw6j9jOusmnUxHI6VZmfs
pnaLscUEubqh0QjpBUVm9NBX6nLMO0MRlqLXKEXNTP2VxogldTBYWsOXDDXT
jVQlcScg+Sc57WmajW4wJ2c7w3Bzc462VnN1VX1lRX11ZXNttb6hXldX29TU
aOju6rPZ7KurQfnTRHTdqaPtoz9nX0MJR60NU2Y5IUIxVtt8V3cf9IxUGwY+
gVQzMjINl8Ulb5jiSOwK+qqcwNJ0hES9cPYQ91qSWHxUCltt2NRsGw37GtE1
OQoE9ayOmhbNRb9Orgia4h32pb7eoQ5zd011A/StmptaDPo2va5VrzO2t3X0
9gz0D4zOL7jhTVy+JHlOyW3tD/w1QkuMHIYV4RIM007X8vjEjKWrV9/S1ths
aGgyQOsFMkyTztika+kfGIErQDOGsC5BNOuqRgsDSfwv6nnku6KV7XdglzVo
2FZE1YOtWexRdchCVJJlvU6F7CWJSM5ratLW3dVvbOloajQ2N7a36Dtr66Dn
0FlT11Rb3zQ2PumYX1xyOfcR26wbfxwOh71e79LSEvSG4GLq6DZ39sAFPjcY
TZBnINvA/YX843L7QhFaWJsounZso1llnQumziKMorgDFe/SoGFLEF2uHAgE
JiYmTCZTXUNzfaOuvlEPCaeyur68sraisqGquqmmrrG1vaO3b8hqs1MsQ8we
XuRUxwRJ5uL0jOyzRMkyqOIM0Z4FuWBJj1B0P/u6cEq0hsy6RcTpefJ10M0J
Maw/HBmZsA2PW7v6RppbzPXNrYY2S3tnn9HUberoMneiR7gX7WbL4NDY4pIH
ekk7e8g1aPhyEV0tD5/TNKpeg9fgwqJ7eGQCXpWk3wfSTll5HeQcyDzwn8a2
DmgP6Axt0Dzo6u4bG5+enLIODY9PTdtWAiHohS2vrJKARvTy1y9VYtHrX//b
/BF0XNSCllAosuJbnRifaWk1Q2KEflCbyQLppbpeDzcYWizwsbYe0qYerkCM
mYHBYciTq6HIOnrctkOrQYOG9fhrb2A0GFrwLQcW5l2Wrj7ohiDyqWlubGrV
6U1waW/vrmvQVdU0lFXUVFTVQSLCLlgzXBob9E2NBrg0N7Xomo16XatB3waX
zo7u2Rl7h7mrsqIGPvZ095vaO8dGpwb6RyB79PcNd1l6hwbH+noH4bvwRWOL
qdVobmvtgH9bV9sEF/iBcIGvtBjMOqwZjjemo6nZ1NDYVl/XpIO8Y7IMD43b
5xaht4hKhUVJtYLU+uj9XLSoQcN+wjqrJrobVJUBVFeGT0kDF04lCyyL+kPh
tTw9ZevrHTKbuiC3VFbUVpTXVFXW4cyXnG0nS2NDi7rU1+lrqpvKy2qLCisK
C8rhY0lxVVlpjbrAt1DirKqxrlYHV25qNMIncKmtaa4or4NvwefwM43G1rY2
E2QkyEujY1NW27zT5fP5QzTNRiI0yc1tMp+L7Is2j0mDhp3BBqpQGxWKcNFj
PSW5FFCKqthRP0EKBFYjYWY1EHY5l62zDmhmWDp7WtFAgZYuS9/I8GR7W2dJ
cUVpSSVkp7JSyDZVkKmgCVRT3QCZCtoz0JJpqNd1mLshn4wMT8zZFuDnzEzP
uV0+lCpCNMJFlz2T7DbLCWSg9lrDxVrYV9ggBKRBg4Zth1rFp7YQqhV9SqXx
Z3EVtWTurynm6KzNf1RO+Gs9/19VB//6V9GJNvR1hEbkt/Cy9oK0zmyL/mRN
/0eDhh3GRhedCE0XkZeiYxyi3GMVJfAl57PWsdNaqgjXv6mq7J9/w9qaeFSE
3CVK+qyxc0N/XtnyN1JjEDy0YzheEtbvgriBCHz09miEo0HDrkCQR3mqyt6C
7IBE1d2SxLW4ZktwRImd46noj/pb10x9S+EBKTomLUbxmPqi2mQgCGv1M2LU
LFpcL7TWWPp/g5RRED1oOxT+YzRvIBaNFjajYBSMglEwCuAAANq2utQ=
     "], {{0, 319}, {
     378, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->{167.3333333333323, Automatic},
   ImageSizeRaw->{378, 319},
   PlotRange->{{0, 378}, {0, 319}}]], "Input"]
}], "Text",
 CellChangeTimes->{{3.668717141983185*^9, 3.6687171675185966`*^9}, {
  3.668717228833661*^9, 3.668717329099736*^9}, {3.668731285098968*^9, 
  3.668731369638829*^9}},
 TextAlignment->Center],

Cell["\<\
Interestingly, modelling the points contacting the wall is unnecessary. \
Because the reaction forces don\[CloseCurlyQuote]t matter to the success \
conditions, we can just model the three joints on the right.\
\>", "Text",
 CellChangeTimes->{
  3.6687312954153*^9, {3.668731893062367*^9, 3.6687319370783587`*^9}, {
   3.668732006378283*^9, 3.668732052945918*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"(", 
   RowBox[{"equations", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"F4", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"30", " ", "Degree"}], "]"}]}], "-", 
        RowBox[{"F3", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"30", " ", "Degree"}], "]"}]}], "-", 
        RowBox[{"F1", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", " ", "Degree"}], "]"}]}], "-", 
        RowBox[{"F2", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]1", " ", "Degree"}], "]"}]}]}], "\[Equal]", "0"}], 
      " ", 
      RowBox[{"(*", 
       RowBox[{"Joint", " ", "1", " ", "x"}], "*)"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", "F4"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"30", " ", "Degree"}], "]"}]}], "-", 
        RowBox[{"F3", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"30", " ", "Degree"}], "]"}]}], "+", 
        RowBox[{"F1", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", " ", "Degree"}], "]"}]}], "-", 
        RowBox[{"F2", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]1", " ", "Degree"}], "]"}]}]}], "\[Equal]", "0"}], 
      " ", 
      RowBox[{"(*", 
       RowBox[{"Joint", " ", "1", " ", "y"}], "*)"}], ",", 
      "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", "F4"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"60", " ", "Degree"}], "]"}]}], "-", "F5"}], "\[Equal]", 
       "0"}], 
      RowBox[{"(*", 
       RowBox[{"Joint", " ", "2", " ", "x"}], "*)"}], ",", 
      "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"F4", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"60", " ", "Degree"}], "]"}]}], "-", "Fext1"}], "\[Equal]", 
       "0"}], 
      RowBox[{"(*", 
       RowBox[{"Joint", " ", "2", " ", "y"}], "*)"}], ",", 
      "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"F3", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"60", " ", "Degree"}], "]"}]}], "+", "F5"}], "\[Equal]", 
       "0"}], 
      RowBox[{"(*", 
       RowBox[{"Joint", " ", "3", " ", "x"}], "*)"}], ",", 
      "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"F3", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"60", " ", "Degree"}], "]"}]}], "-", "Fext2"}], "\[Equal]", 
       "0"}]}], 
     RowBox[{"(*", 
      RowBox[{"Joint", " ", "3", " ", "y"}], "*)"}], "\[IndentingNewLine]", 
     "}"}]}], ")"}], "//", "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"variables", "=", 
   RowBox[{"{", 
    RowBox[{"F1", ",", "F2", ",", "F3", ",", "F4", ",", "F5"}], "}"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.668717349550539*^9, 3.6687173529606543`*^9}, {
   3.668717434532942*^9, 3.668717561494987*^9}, {3.66871765376897*^9, 
   3.6687177055828333`*^9}, {3.668717740440729*^9, 3.668717821275222*^9}, 
   3.668717865553495*^9, {3.668728657462367*^9, 3.668728658980612*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["F3", "2"]}], "+", 
         FractionBox["F4", "2"], "-", 
         RowBox[{"F1", " ", 
          RowBox[{"Cos", "[", 
           RowBox[{"\[Degree]", " ", "\[Theta]1"}], "]"}]}], "-", 
         RowBox[{"F2", " ", 
          RowBox[{"Cos", "[", 
           RowBox[{"\[Degree]", " ", "\[Theta]1"}], "]"}]}]}], "\[Equal]", 
        "0"}]},
      {
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox[
           RowBox[{
            SqrtBox["3"], " ", "F3"}], "2"]}], "-", 
         FractionBox[
          RowBox[{
           SqrtBox["3"], " ", "F4"}], "2"], "+", 
         RowBox[{"F1", " ", 
          RowBox[{"Sin", "[", 
           RowBox[{"\[Degree]", " ", "\[Theta]1"}], "]"}]}], "-", 
         RowBox[{"F2", " ", 
          RowBox[{"Sin", "[", 
           RowBox[{"\[Degree]", " ", "\[Theta]1"}], "]"}]}]}], "\[Equal]", 
        "0"}]},
      {
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["F4", "2"]}], "-", "F5"}], "\[Equal]", "0"}]},
      {
       RowBox[{
        RowBox[{
         FractionBox[
          RowBox[{
           SqrtBox["3"], " ", "F4"}], "2"], "-", "Fext1"}], "\[Equal]", "0"}]},
      {
       RowBox[{
        RowBox[{
         FractionBox["F3", "2"], "+", "F5"}], "\[Equal]", "0"}]},
      {
       RowBox[{
        RowBox[{
         FractionBox[
          RowBox[{
           SqrtBox["3"], " ", "F3"}], "2"], "-", "Fext2"}], "\[Equal]", 
        "0"}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668717771599566*^9, 3.668717821665298*^9}, 
   3.6687178658066196`*^9, 3.668727550211075*^9, 3.668728660035946*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"setup", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Theta]1", "\[Rule]", "30"}], ",", 
     RowBox[{"\[Theta]2", "\[Rule]", "0"}], ",", 
     RowBox[{"Fext1", "\[Rule]", "10000"}], ",", 
     RowBox[{"Fext2", "\[Rule]", "10000"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.668728629781528*^9, 3.668728644531829*^9}}],

Cell[CellGroupData[{

Cell["Method 1: Solve[]", "Subsubsection",
 CellChangeTimes->{{3.668727753184174*^9, 3.66872775949445*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"equations", "/.", "setup"}], ",", "variables"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.6687275826317053`*^9, 3.668727725232903*^9}, {
  3.668727765184692*^9, 3.668727765489224*^9}, {3.6687314341237583`*^9, 
  3.6687314355297623`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{"F1", "\[Rule]", "20000"}]},
      {
       RowBox[{"F2", "\[Rule]", 
        RowBox[{"-", "20000"}]}]},
      {
       RowBox[{"F3", "\[Rule]", 
        FractionBox["20000", 
         SqrtBox["3"]]}]},
      {
       RowBox[{"F4", "\[Rule]", 
        FractionBox["20000", 
         SqrtBox["3"]]}]},
      {
       RowBox[{"F5", "\[Rule]", 
        RowBox[{"-", 
         FractionBox["10000", 
          SqrtBox["3"]]}]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668727621180085*^9, 3.668727725386092*^9}, 
   3.668727928703734*^9, 3.668728666384054*^9, 3.6687314357901707`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Method 2: Matricies", "Subsubsection",
 CellChangeTimes->{{3.6687277732022457`*^9, 3.668727779404217*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "The", " ", "inversion", " ", "of", " ", "b", " ", "accomplishes", " ", 
    "the", " ", "negation", " ", "of", " ", "moving", " ", "the", " ", 
    "coefficients", " ", "to", " ", "the", " ", "other", " ", "side", " ", 
    "of", " ", "the", " ", "equation"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b", ",", "a"}], "}"}], "=", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}], 
      RowBox[{"CoefficientArrays", "[", 
       RowBox[{
        RowBox[{"equations", "/.", "setup"}], ",", "variables"}], "]"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"MatrixForm", "/@", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.668727571458729*^9, 3.668727575298725*^9}, {
  3.668727786235187*^9, 3.668727882621364*^9}, {3.668727916078916*^9, 
  3.668727917092643*^9}, {3.6687281746924953`*^9, 3.668728217293154*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"-", 
         FractionBox[
          SqrtBox["3"], "2"]}], 
        RowBox[{"-", 
         FractionBox[
          SqrtBox["3"], "2"]}], 
        RowBox[{"-", 
         FractionBox["1", "2"]}], 
        FractionBox["1", "2"], "0"},
       {
        FractionBox["1", "2"], 
        RowBox[{"-", 
         FractionBox["1", "2"]}], 
        RowBox[{"-", 
         FractionBox[
          SqrtBox["3"], "2"]}], 
        RowBox[{"-", 
         FractionBox[
          SqrtBox["3"], "2"]}], "0"},
       {"0", "0", "0", 
        RowBox[{"-", 
         FractionBox["1", "2"]}], 
        RowBox[{"-", "1"}]},
       {"0", "0", "0", 
        FractionBox[
         SqrtBox["3"], "2"], "0"},
       {"0", "0", 
        FractionBox["1", "2"], "0", "1"},
       {"0", "0", 
        FractionBox[
         SqrtBox["3"], "2"], "0", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[
     SparseArray[
      Automatic, {6, 5}, 0, {
       1, {{0, 4, 8, 10, 11, 13, 14}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {
         4}, {4}, {5}, {4}, {3}, {5}, {3}}}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2], 
         Rational[-1, 2], Rational[1, 2], Rational[1, 2], Rational[-1, 2], 
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2], 
         Rational[-1, 2], -1, Rational[1, 2] 3^Rational[1, 2], Rational[1, 2],
          1, Rational[1, 2] 3^Rational[1, 2]}}]]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
     TagBox[GridBox[{
        {"0"},
        {"0"},
        {"0"},
        {"10000"},
        {"0"},
        {"10000"}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}],
      Column], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[
      SparseArray[
      Automatic, {6}, 0, {1, {{0, 2}, {{4}, {6}}}, {10000, 10000}}]]]]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.668727873476495*^9, 3.668727883134562*^9}, 
   3.668727917443059*^9, {3.668728179448188*^9, 3.668728185392103*^9}, 
   3.668728219766824*^9, 3.668728676861867*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatrixForm", "[", "variables", "]"}], "\[Equal]", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"sol", "=", 
    RowBox[{"LinearSolve", "[", 
     RowBox[{"a", ",", "b"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.668727815836187*^9, 3.66872781887755*^9}, {
  3.668727857373086*^9, 3.668727860630958*^9}, {3.668728231523137*^9, 
  3.668728271787904*^9}, {3.668728703104342*^9, 3.6687287108200283`*^9}}],

Cell[BoxData[
 RowBox[{
  TagBox[
   RowBox[{"(", "\[NoBreak]", 
    TagBox[GridBox[{
       {"F1"},
       {"F2"},
       {"F3"},
       {"F4"},
       {"F5"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], "\[Equal]", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", 
    TagBox[GridBox[{
       {"20000"},
       {
        RowBox[{"-", "20000"}]},
       {
        FractionBox["20000", 
         SqrtBox["3"]]},
       {
        FractionBox["20000", 
         SqrtBox["3"]]},
       {
        RowBox[{"-", 
         FractionBox["10000", 
          SqrtBox["3"]]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{{3.668727819703547*^9, 3.668727860910932*^9}, 
   3.6687279194759703`*^9, {3.6687282220485077`*^9, 3.6687282722286663`*^9}, 
   3.668728679769396*^9, 3.6687287120186453`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Analysis", "Subsubsection",
 CellChangeTimes->{{3.668728582711341*^9, 3.668728583817971*^9}}],

Cell["\<\
Again, all of the values here represent tensions, so these results indicate \
that bars 1,3, and 4 are in tension, while bars 2 and 5 are under \
compression. Intuitively, this makes sense.\
\>", "Text",
 CellChangeTimes->{{3.668728589988061*^9, 3.668728618475768*^9}, {
  3.6687286832524347`*^9, 3.668728739639305*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"N", "@", "sol"}], "//", "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Max", "[", "sol", "]"}], "\[LessEqual]", "45000"}]}], "Input",
 CellChangeTimes->{{3.668728744040227*^9, 3.668728747223682*^9}, {
  3.668728783559085*^9, 3.6687288038396597`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {"20000.`"},
      {
       RowBox[{"-", "20000.`"}]},
      {"11547.005383792517`"},
      {"11547.005383792517`"},
      {
       RowBox[{"-", "5773.5026918962585`"}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.668728747575294*^9, 3.668728804835889*^9}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.668728747575294*^9, 3.6687288048968782`*^9}]
}, Open  ]],

Cell[TextData[{
 "Additionally, the results reveal that the maximum tensile load does not \
exceed the required ",
 Cell[BoxData[
  FormBox[
   RowBox[{"45", " ", "kips"}], TraditionalForm]]],
 ", satisfying the requirements."
}], "Text",
 CellChangeTimes->{{3.668728749390377*^9, 3.6687288256605873`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extensions", "Subsubsection",
 CellChangeTimes->{{3.6687288275070744`*^9, 3.66872882879422*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "@", "solve"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"solve", "[", "setup_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"b", ",", "a"}], "}"}], "=", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}], 
       RowBox[{"CoefficientArrays", "[", 
        RowBox[{
         RowBox[{"equations", "/.", "setup"}], ",", "variables"}], "]"}]}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"MatrixForm", "[", "variables", "]"}], "\[Equal]", 
      RowBox[{"MatrixForm", "[", 
       RowBox[{"sol", "=", 
        RowBox[{"LinearSolve", "[", 
         RowBox[{"a", ",", "b"}], "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{"equations", "/.", "setup"}], ",", "variables"}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "All", ",", "2"}], "]"}], "]"}], "*)"}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.668728838798781*^9, 3.668728892354278*^9}, {
  3.668729396407146*^9, 3.6687294092772703`*^9}, {3.668729636173554*^9, 
  3.6687296408748837`*^9}}],

Cell["\<\
As expected, letting the two external forces be not equal prevents finding a \
solution.\
\>", "Text",
 CellChangeTimes->{{3.668728920232099*^9, 3.668728939821972*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"solve", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\[Theta]1", "\[Rule]", "30"}], ",", 
    RowBox[{"\[Theta]2", "\[Rule]", "0"}], ",", 
    RowBox[{"Fext1", "\[Rule]", "10000"}], ",", 
    RowBox[{"Fext2", "\[Rule]", "9000"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.668728894258123*^9, 3.668728914793234*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LinearSolve", "::", "nosol"}], "MessageName"], ":", 
  " ", "\<\"Linear equation encountered that has no solution. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/LinearSolve/nosol\\\", \
ButtonNote -> \\\"LinearSolve::nosol\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6687289164713573`*^9, 3.66872941334416*^9, 
  3.668729643405869*^9}],

Cell[BoxData[
 RowBox[{
  TagBox[
   RowBox[{"(", "\[NoBreak]", 
    TagBox[GridBox[{
       {"F1"},
       {"F2"},
       {"F3"},
       {"F4"},
       {"F5"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], "\[Equal]", 
  TagBox[
   RowBox[{"LinearSolve", "[", 
    RowBox[{
     TagBox[
      TemplateBox[{RowBox[{
          StyleBox[
           TagBox["SparseArray", "SummaryHead"], "NonInterpretableSummary"], 
          StyleBox["[", "NonInterpretableSummary"], 
          DynamicModuleBox[{Typeset`open$$ = False}, 
           PanelBox[
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[
                   RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBgA2JWIAaxrcp3x81SOmc/x3jRFvMfV+xfLFJ8HLjqlT0u
cd2zB13fJD60r+e8N2X+ipf2TUVTmbwnv8epnlriuU7uM/onXrS/ERWvsiX1
sb32zxuxC1Le4VS/s9vAdeeWF/Y33Jevq5n21v5kRO6/+K/Uc+dAhQPvkU0z
nS9dsn91fe47m4+77KOFf2xgqX9ir/A+VFu47qg9AxSIbDn5cLLfZZzhhssc
iWfnuw7vPWu/yvSmda3wXPtN55Rc5njewSmOy52kmoPLPaTGOwC6hHiS
                    
                    "], {{0, 0}, {5, 6}}, {0, 1}], AspectRatio -> 1, Axes -> 
                   False, Frame -> False, FrameLabel -> {None, None}, 
                   FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                   Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                   Method -> {
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, "DefaultPlotStyle" -> Automatic, 
                    "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
                    Scaled[0.05]}], 
                  GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["14", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"6", ",", "5"}], "}"}], "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[
                   RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBgA2JWIAaxrcp3x81SOmc/x3jRFvMfV+xfLFJ8HLjqlT0u
cd2zB13fJD60r+e8N2X+ipf2TUVTmbwnv8epnlriuU7uM/onXrS/ERWvsiX1
sb32zxuxC1Le4VS/s9vAdeeWF/Y33Jevq5n21v5kRO6/+K/Uc+dAhQPvkU0z
nS9dsn91fe47m4+77KOFf2xgqX9ir/A+VFu47qg9AxSIbDn5cLLfZZzhhssc
iWfnuw7vPWu/yvSmda3wXPtN55Rc5njewSmOy52kmoPLPaTGOwC6hHiS
                    
                    "], {{0, 0}, {5, 6}}, {0, 1}], AspectRatio -> 1, Axes -> 
                   False, Frame -> False, FrameLabel -> {None, None}, 
                   FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                   Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                   Method -> {
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, "DefaultPlotStyle" -> Automatic, 
                    "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
                    Scaled[0.05]}], 
                  GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["14", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"6", ",", "5"}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.4666666666666667`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", 
                    FractionBox[
                    SqrtBox["3"], "2"]}], ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True, BaselinePosition -> 
                    Baseline, ImageSize -> {{1, 300}, Automatic}], 
                    LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", 
                    FractionBox[
                    SqrtBox["3"], "2"]}], ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True, BaselinePosition -> 
                    Baseline, ImageSize -> {{1, 300}, Automatic}], 
                    LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True, BaselinePosition -> 
                    Baseline, ImageSize -> {{1, 300}, Automatic}], 
                    LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    FractionBox["1", "2"], ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True, BaselinePosition -> 
                    Baseline, ImageSize -> {{1, 300}, Automatic}], 
                    LineBreakWithin -> False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic], 
            BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
          StyleBox["]", "NonInterpretableSummary"]}]},
       "CopyTag",
       DisplayFunction->(#& ),
       InterpretationFunction->("SparseArray[<14>, {6, 5}]"& )],
      False,
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     TagBox[
      TemplateBox[{RowBox[{
          StyleBox[
           TagBox["SparseArray", "SummaryHead"], "NonInterpretableSummary"], 
          StyleBox["[", "NonInterpretableSummary"], 
          DynamicModuleBox[{Typeset`open$$ = False}, 
           PanelBox[
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[
                   
                   RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.235431, 
                    0.32765, 0.833291}, {0.235431, 0.32765, 0.833291}, {
                    0.772061, 0.92462, 0.998703}, {0.235431, 0.32765, 
                    0.833291}, {0.47821939999999996`, 0.7669688, 
                    0.9833304}}}, {{0, 0}, {6, 1}}, {0, 1}], AspectRatio -> 1,
                    Axes -> False, Frame -> False, FrameLabel -> {None, None},
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                   Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                   Method -> {
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, "DefaultPlotStyle" -> Automatic, 
                    "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
                    Scaled[0.05]}], 
                  GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "6", "}"}], "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[
                   
                   RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.235431, 
                    0.32765, 0.833291}, {0.235431, 0.32765, 0.833291}, {
                    0.772061, 0.92462, 0.998703}, {0.235431, 0.32765, 
                    0.833291}, {0.47821939999999996`, 0.7669688, 
                    0.9833304}}}, {{0, 0}, {6, 1}}, {0, 1}], AspectRatio -> 1,
                    Axes -> False, Frame -> False, FrameLabel -> {None, None},
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                   Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                   Method -> {
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, "DefaultPlotStyle" -> Automatic, 
                    "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
                    Scaled[0.05]}], 
                  GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "6", "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.3333333333333333`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", "4", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "10000", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "6", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "9000", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic], 
            BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
          StyleBox["]", "NonInterpretableSummary"]}]},
       "CopyTag",
       DisplayFunction->(#& ),
       InterpretationFunction->("SparseArray[<2>, {6}]"& )],
      False,
      Editable->False,
      SelectWithContents->True,
      Selectable->False]}], "]"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{3.6687289165502443`*^9, 3.668729413405884*^9, 
  3.668729643481326*^9}]
}, Open  ]],

Cell["\<\
Setting them to floating point (inexact) values also prevents the calculation \
from proceeding. I do not fully understand why.\
\>", "Text",
 CellChangeTimes->{{3.6687289508729343`*^9, 3.668728966937874*^9}, {
  3.6687290506702967`*^9, 3.668729064505027*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"solve", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\[Theta]1", "\[Rule]", "30"}], ",", 
    RowBox[{"\[Theta]2", "\[Rule]", "0"}], ",", 
    RowBox[{"Fext1", "\[Rule]", "10000."}], ",", 
    RowBox[{"Fext2", "\[Rule]", "10000."}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.668728894258123*^9, 3.668728914793234*^9}, {
  3.668728972386066*^9, 3.6687290696332207`*^9}, {3.668731741271186*^9, 
  3.668731755006155*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LinearSolve", "::", "sqmat"}], "MessageName"], ":", 
  " ", "\<\"The matrix \[NoBreak]\\!\\(\\*RowBox[{\\\"SparseArray\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}]\\)\[NoBreak] is not square. A square matrix is needed to \
compute a factorization. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/LinearSolve\\\", ButtonNote -> \
\\\"LinearSolve::sqmat\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.6687317510331173`*^9, 3.668731755483549*^9}}],

Cell[BoxData[
 RowBox[{
  TagBox[
   RowBox[{"(", "\[NoBreak]", 
    TagBox[GridBox[{
       {"F1"},
       {"F2"},
       {"F3"},
       {"F4"},
       {"F5"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     Column], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], "\[Equal]", 
  TagBox[
   RowBox[{"LinearSolve", "[", 
    RowBox[{
     TagBox[
      TemplateBox[{RowBox[{
          StyleBox[
           TagBox["SparseArray", "SummaryHead"], "NonInterpretableSummary"], 
          StyleBox["[", "NonInterpretableSummary"], 
          DynamicModuleBox[{Typeset`open$$ = False}, 
           PanelBox[
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[
                   RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBgA2JWIAaxrcp3x81SOmc/x3jRFvMfV+xfLFJ8HLjqlT0u
cd2zB13fJD60r+e8N2X+ipf2TUVTmbwnv8epnlriuU7uM/onXrS/ERWvsiX1
sb32zxuxC1Le4VS/s9vAdeeWF/Y33Jevq5n21v5kRO6/+K/Uc+dAhQPvkU0z
nS9dsn91fe47m4+77KOFf2xgqX9ir/A+VFu47qg9AxSIbDn5cLLfZZzhhssc
iWfnuw7vPWu/yvSmda3wXPtN55Rc5njewSmOy52kmoPLPaTGOwC6hHiS
                    
                    "], {{0, 0}, {5, 6}}, {0, 1}], AspectRatio -> 1, Axes -> 
                   False, Frame -> False, FrameLabel -> {None, None}, 
                   FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                   Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                   Method -> {
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, "DefaultPlotStyle" -> Automatic, 
                    "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
                    Scaled[0.05]}], 
                  GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["14", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"6", ",", "5"}], "}"}], "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[
                   RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBgA2JWIAaxrcp3x81SOmc/x3jRFvMfV+xfLFJ8HLjqlT0u
cd2zB13fJD60r+e8N2X+ipf2TUVTmbwnv8epnlriuU7uM/onXrS/ERWvsiX1
sb32zxuxC1Le4VS/s9vAdeeWF/Y33Jevq5n21v5kRO6/+K/Uc+dAhQPvkU0z
nS9dsn91fe47m4+77KOFf2xgqX9ir/A+VFu47qg9AxSIbDn5cLLfZZzhhssc
iWfnuw7vPWu/yvSmda3wXPtN55Rc5njewSmOy52kmoPLPaTGOwC6hHiS
                    
                    "], {{0, 0}, {5, 6}}, {0, 1}], AspectRatio -> 1, Axes -> 
                   False, Frame -> False, FrameLabel -> {None, None}, 
                   FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                   Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                   Method -> {
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, "DefaultPlotStyle" -> Automatic, 
                    "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
                    Scaled[0.05]}], 
                  GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["14", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"6", ",", "5"}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.4666666666666667`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", "0.8660254037844386`"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", "0.8660254037844386`"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", "0.5`"}], ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True, BaselinePosition -> 
                    Baseline, ImageSize -> {{1, 300}, Automatic}], 
                    LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "0.5`", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic], 
            BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
          StyleBox["]", "NonInterpretableSummary"]}]},
       "CopyTag",
       DisplayFunction->(#& ),
       InterpretationFunction->("SparseArray[<14>, {6, 5}]"& )],
      False,
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     TagBox[
      TemplateBox[{RowBox[{
          StyleBox[
           TagBox["SparseArray", "SummaryHead"], "NonInterpretableSummary"], 
          StyleBox["[", "NonInterpretableSummary"], 
          DynamicModuleBox[{Typeset`open$$ = False}, 
           PanelBox[
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[
                   
                   RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.235431, 
                    0.32765, 0.833291}, {0.235431, 0.32765, 0.833291}, {
                    0.772061, 0.92462, 0.998703}, {0.235431, 0.32765, 
                    0.833291}, {0.772061, 0.92462, 0.998703}}}, {{0, 0}, {6, 
                    1}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> 
                   False, FrameLabel -> {None, None}, FrameStyle -> 
                   Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                   Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                   Method -> {
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, "DefaultPlotStyle" -> Automatic, 
                    "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
                    Scaled[0.05]}], 
                  GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "6", "}"}], "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[
                   
                   RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.235431, 
                    0.32765, 0.833291}, {0.235431, 0.32765, 0.833291}, {
                    0.772061, 0.92462, 0.998703}, {0.235431, 0.32765, 
                    0.833291}, {0.772061, 0.92462, 0.998703}}}, {{0, 0}, {6, 
                    1}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> 
                   False, FrameLabel -> {None, None}, FrameStyle -> 
                   Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                   Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                   Method -> {
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, "DefaultPlotStyle" -> Automatic, 
                    "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
                    Scaled[0.05]}], 
                  GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "6", "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.3333333333333333`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", "4", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "10000.`", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "6", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "10000.`", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic], 
            BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
          StyleBox["]", "NonInterpretableSummary"]}]},
       "CopyTag",
       DisplayFunction->(#& ),
       InterpretationFunction->("SparseArray[<2>, {6}]"& )],
      False,
      Editable->False,
      SelectWithContents->True,
      Selectable->False]}], "]"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{{3.668728976460512*^9, 3.668729038623596*^9}, 
   3.66872907008639*^9, 3.668729418265359*^9, 3.668729646319159*^9, {
   3.668731743669582*^9, 3.668731755658372*^9}}]
}, Open  ]],

Cell[TextData[{
 "We can plot the affect of ",
 Cell[BoxData[
  FormBox["\[Theta]1", TraditionalForm]]],
 " on the maximum tension."
}], "Text",
 CellChangeTimes->{{3.668729099011867*^9, 3.668729117358225*^9}}],

Cell[TextData[{
 "A few tricks were brought into play here, namely the conversion of ",
 Cell[BoxData[
  FormBox["\[Theta]1", TraditionalForm]]],
 " to an exact number rather than an approximate value with Round[]. This \
matrix can ",
 StyleBox["only",
  FontSlant->"Italic"],
 " be solved in exact terms."
}], "Text",
 CellChangeTimes->{{3.668729887446472*^9, 3.66872993021521*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"maxTension", "[", "var_", "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{"Max", "[", 
    RowBox[{
     RowBox[{"solve", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Theta]1", "\[Rule]", 
         RowBox[{"Round", "[", 
          RowBox[{"var", ",", 
           RowBox[{"10", "^", 
            RowBox[{"-", "1000"}]}]}], "]"}]}], ",", 
        RowBox[{"\[Theta]2", "\[Rule]", "0"}], ",", 
        RowBox[{"Fext1", "\[Rule]", "10000"}], ",", 
        RowBox[{"Fext2", "\[Rule]", "10000"}]}], "}"}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.668729119435628*^9, 3.6687291512723837`*^9}, {
  3.668729190756749*^9, 3.668729190860838*^9}, {3.668730098132468*^9, 
  3.6687301231744337`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"maxTension", "[", "var", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"var", ",", "0", ",", "60"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "150000"}], "}"}]}], ",", 
   RowBox[{"GridLines", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"{", "45000", "}"}], "}"}]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\[Theta]1 (\!\(\*TemplateBox[{InterpretationBox[\"\[InvisibleSpace]\
\", 1],RowBox[{\"\[InvisibleSpace]\", \
\"\\\"\[Degree]\\\"\"}],\"degrees\",\"\\\"AngularDegrees\\\"\"},
\"QuantityPostfix\"]\))\>\"", ",", "\"\<Maximum tension (lbs)\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.668729153515916*^9, 3.668729156293041*^9}, {
  3.668729227653674*^9, 3.66872932317351*^9}, {3.6687294993997517`*^9, 
  3.668729501031705*^9}, {3.668729622277006*^9, 3.668729622477944*^9}, {
  3.66872966630389*^9, 3.668729804741886*^9}, {3.668729933541284*^9, 
  3.668730028524523*^9}, {3.668730110476553*^9, 3.668730120125306*^9}, {
  3.668730351921385*^9, 3.668730393513607*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox[
    "\"\[Theta]1 (\\!\\(\\*TemplateBox[{InterpretationBox[\\\"\
\[InvisibleSpace]\\\", 1],RowBox[{\\\"\[InvisibleSpace]\\\", \\\"\\\\\\\"\
\[Degree]\\\\\\\"\\\"}],\\\"degrees\\\",\\\"\\\\\\\"AngularDegrees\\\\\\\"\\\"\
},\\n\\\"QuantityPostfix\\\"]\\))\"", TraditionalForm], 
    FormBox["\"Maximum tension (lbs)\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{{45000}, {45000}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{0., 59.99999877551021}, {0, 150000}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.668729156718396*^9, {3.668729205582505*^9, 3.6687292186066313`*^9}, {
   3.6687292649416847`*^9, 3.668729282357239*^9}, {3.6687293126240177`*^9, 
   3.6687293237636747`*^9}, {3.668729493878064*^9, 3.668729502619651*^9}, {
   3.66872962489695*^9, 3.668729767089488*^9}, 3.6687298095683126`*^9, {
   3.668729935463663*^9, 3.668729985035309*^9}, {3.668730020578635*^9, 
   3.668730029803446*^9}, 3.6687301266739902`*^9, {3.668730390107461*^9, 
   3.668730402860387*^9}}]
}, Open  ]],

Cell["\<\
Of course, this allows us to Solve for that intersection point...\
\>", "Text",
 CellChangeTimes->{{3.6687300475372047`*^9, 3.668730070074085*^9}, {
  3.668730289681245*^9, 3.6687302982148647`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"optimum", "=", 
  RowBox[{"FindRoot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"maxTension", "[", "var", "]"}], "\[Equal]", "45000"}], ",", 
    RowBox[{"{", 
     RowBox[{"var", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6687301307168827`*^9, 3.668730192400194*^9}, {
  3.668730536658538*^9, 3.6687305385496483`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"var", "\[Rule]", "12.839588406904149`"}], "}"}]], "Output",
 CellChangeTimes->{{3.6687301682188997`*^9, 3.6687301936644*^9}, 
   3.668730425468355*^9, 3.66873049450944*^9, 3.66873053983112*^9, 
   3.668730574390153*^9}]
}, Open  ]],

Cell["\<\
This means the entire structure can be optimized to a vertical spread between \
wall mountpoints of\
\>", "Text",
 CellChangeTimes->{{3.668730302168635*^9, 3.668730327086733*^9}, {
  3.66873052090543*^9, 3.668730525763343*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sin", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"var", "/.", "optimum"}], ")"}], " ", "Degree"}], "]"}], 
  TemplateBox[{
   InterpretationBox["\[InvisibleSpace]", 1],"\"ft\"","feet","\"Feet\""},
   "Quantity"]}]], "Input",
 CellChangeTimes->{{3.6687305322788754`*^9, 3.668730580503183*^9}}],

Cell[BoxData[
 TemplateBox[{"0.2222222222222222`","\"ft\"","feet","\"Feet\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.668730567060701*^9, 3.668730580785492*^9}}]
}, Open  ]],

Cell["Not bad.", "Text",
 CellChangeTimes->{{3.6687306367012587`*^9, 3.668730638676797*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Misc", "Section",
 CellChangeTimes->{{3.668540193564677*^9, 3.6685401945476027`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{"x", "\[Equal]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], ",", "x", ",", 
   RowBox[{"Vectors", "[", "2", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6685401961878133`*^9, 3.6685402132382*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NSolve", "::", "bdomv"}], "MessageName"], ":", 
  " ", "\<\"Warning: \[NoBreak]\\!\\(\\*RowBox[{\\\"Vectors\\\", \\\"[\\\", \
RowBox[{\\\"2\\\", \\\",\\\", \\\"Complexes\\\"}], \\\"]\\\"}]\\)\[NoBreak] \
is not a valid domain specification. Assuming it is a variable to eliminate. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/NSolve\\\", ButtonNote -> \
\\\"NSolve::bdomv\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6685402140183*^9}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.668540204758312*^9, 3.6685402140183*^9}}]
}, Open  ]],

Cell[BoxData["Array"], "Input",
 CellChangeTimes->{{3.6685403216959724`*^9, 3.668540322460411*^9}}],

Cell[BoxData[
 RowBox[{"soleq1", ",", "soleq2", ",", "soleq3", ",", "xval", ",", "yval", 
  ",", "zval"}]], "Input"],

Cell[BoxData[
 RowBox[{"CoefficientArrays", "[", "]"}]], "Input",
 CellChangeTimes->{{3.668540489788927*^9, 3.668540495145831*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"elim3", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "+", "y", "+", "z"}], "\[Equal]", "6"}], ",", 
   RowBox[{
    RowBox[{"x", "+", "y", "+", "z"}], "\[Equal]", "6"}], ",", 
   RowBox[{
    RowBox[{"x", "+", "y", "+", "z"}], "\[Equal]", "6"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.668625305429274*^9, 3.668625307103754*^9}, {
  3.668625347891571*^9, 3.668625379263311*^9}, {3.668625441866588*^9, 
  3.668625443711114*^9}, {3.668625619617859*^9, 3.6686256225886307`*^9}, {
  3.6686256941197367`*^9, 3.6686256997417393`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "partw"}], "MessageName"], ":", 
  " ", "\<\"Part \[NoBreak]\\!\\(\\*RowBox[{\\\"1\\\"}]\\)\[NoBreak] of \
\[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \\\"}\\\"}]\\)\[NoBreak] does not \
exist. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/partw\\\", ButtonNote -> \
\\\"Part::partw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.668625622899886*^9, {3.668625659141762*^9, 3.6686257190257998`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"6", "-", "z", "-", 
    RowBox[{
     RowBox[{"{", "}"}], "\[LeftDoubleBracket]", 
     RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}], ",", 
   RowBox[{
    RowBox[{"{", "}"}], "\[LeftDoubleBracket]", 
    RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ",", "z"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.66862562293069*^9, {3.668625659170309*^9, 3.668625719056131*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["soleq1"], "Input",
 CellChangeTimes->{{3.668625721133275*^9, 3.668625722250449*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", 
   RowBox[{"6", "-", "y", "-", "z"}]}], "}"}]], "Output",
 CellChangeTimes->{3.66862572253128*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["soleq2"], "Input",
 CellChangeTimes->{{3.668625725657496*^9, 3.668625727364118*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.668625727713695*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"x", "+", "y", "+", "z"}], "\[Equal]", "6"}], ")"}], "/.", 
  "soleq1"}]], "Input",
 CellChangeTimes->{{3.6686257442881393`*^9, 3.668625750211075*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.6686257505299387`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LUDecomposition", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.668629208361731*^9, 3.6686292175333157`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.668629217811356*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RowReduce", "[", 
  RowBox[{"(", GridBox[{
     {"a", "b", "1", "0"},
     {"c", "d", "0", "1"}
    }], ")"}], "]"}]], "Input",
 CellChangeTimes->{{3.6686295813805113`*^9, 3.6686295985397453`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", 
     FractionBox["d", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "b"}], " ", "c"}], "+", 
       RowBox[{"a", " ", "d"}]}]], ",", 
     FractionBox["b", 
      RowBox[{
       RowBox[{"b", " ", "c"}], "-", 
       RowBox[{"a", " ", "d"}]}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", 
     FractionBox["c", 
      RowBox[{
       RowBox[{"b", " ", "c"}], "-", 
       RowBox[{"a", " ", "d"}]}]], ",", 
     FractionBox["a", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "b"}], " ", "c"}], "+", 
       RowBox[{"a", " ", "d"}]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.668629599094654*^9, 3.668629813498077*^9, {3.6686298638340693`*^9, 
   3.668629880458192*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Partition", "[", 
  RowBox[{"%", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6686298153090677`*^9, 3.6686298432234497`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        FractionBox["d", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "b"}], " ", "c"}], "+", 
          RowBox[{"a", " ", "d"}]}]], ",", 
        FractionBox["b", 
         RowBox[{
          RowBox[{"b", " ", "c"}], "-", 
          RowBox[{"a", " ", "d"}]}]]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["c", 
         RowBox[{
          RowBox[{"b", " ", "c"}], "-", 
          RowBox[{"a", " ", "d"}]}]], ",", 
        FractionBox["a", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "b"}], " ", "c"}], "+", 
          RowBox[{"a", " ", "d"}]}]]}], "}"}]}], "}"}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.66862984354599*^9, 3.668629881872363*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.668629853551745*^9, 3.668629878707164*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["d", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "b"}], " ", "c"}], "+", 
       RowBox[{"a", " ", "d"}]}]], ",", 
     FractionBox["b", 
      RowBox[{
       RowBox[{"b", " ", "c"}], "-", 
       RowBox[{"a", " ", "d"}]}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["c", 
      RowBox[{
       RowBox[{"b", " ", "c"}], "-", 
       RowBox[{"a", " ", "d"}]}]], ",", 
     FractionBox["a", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "b"}], " ", "c"}], "+", 
       RowBox[{"a", " ", "d"}]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.668629855553462*^9, 3.668629883754965*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"val", "=", "%"}]], "Input",
 CellChangeTimes->{{3.668629890146511*^9, 3.668629894465971*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["d", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "b"}], " ", "c"}], "+", 
       RowBox[{"a", " ", "d"}]}]], ",", 
     FractionBox["b", 
      RowBox[{
       RowBox[{"b", " ", "c"}], "-", 
       RowBox[{"a", " ", "d"}]}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["c", 
      RowBox[{
       RowBox[{"b", " ", "c"}], "-", 
       RowBox[{"a", " ", "d"}]}]], ",", 
     FractionBox["a", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "b"}], " ", "c"}], "+", 
       RowBox[{"a", " ", "d"}]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6686298947698193`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"Inverse", "@", "val"}], "]"}]], "Input",
 CellChangeTimes->{{3.668629895686038*^9, 3.66862990749517*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.668629899369018*^9, 3.668629907809238*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldForm", "@", 
    RowBox[{"Inverse", "@", 
     RowBox[{"IdentityMatrix", "[", "5", "]"}]}]}], "//", "Transpose"}], "//",
   "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.668632602949181*^9, 3.668632634592183*^9}, {
  3.668633002106329*^9, 3.668633015821033*^9}}],

Cell[BoxData[
 FormBox[
  TemplateBox[{RowBox[{"(", 
      TagBox[
       TemplateBox[{
         RowBox[{"IdentityMatrix", "[", "5", "]"}]}, "Inverse", SyntaxForm -> 
        SuperscriptBox], HoldForm], ")"}]},
   "Transpose"], TraditionalForm]], "Output",
 CellChangeTimes->{{3.668632618508019*^9, 3.668632634899727*^9}, {
  3.6686330087528477`*^9, 3.668633016228779*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"StringSplit", "@", 
     RowBox[{"TextRecognize", "[", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJztnQfM1Ebaxw+IEvpHOwhVgVBFUQggylFERxSB6AQIIogqQeglCTUcvYSj
HCUQiKiBII6jCUIRPQICoQoIEILovedy3M13/0eyte+u7d1339312Pv/SYZ3
PWP7mebH88wzM0U/+bR1r/R/+tOfhmT83z+tu4+oO3hw91Ft3vrfj3qjhvb8
JMP//jj3v2Nauj/9CScVIYQQQgghhBBCCCFxJm/evOqdd96xPbZu3eq2iIQQ
QmJAxYoVHd/3ixcvtrzu//7v/1T27NlV/fr1LY8jR44kOCWEEELiQY8ePSzf
8xUqVFAYuv773/9ueR30xF/+8pcES0sIIUQX/vnPf1JPEEIIsYV6ghBCiBPU
E4QQQpygniCEEOIE9URs+fe//63++9//pvq6f/3rX3GQJrH4IQ3JzH/+85+I
4ulazjrK5ReZ/K4nvv76a1WoUCH1zTffxO0Zz58/VwMHDlTlypVTb731lsqW
LZuqVq2aWrdunWPbO3v2rGrfvr0qWLCgKlCggMqZM6f65JNP1N27d+Mma6zx
Qxp0IRF1NRh812zatEk1a9ZMlS9fXt28edMynq7lrKNcfpTJ73oCsiN9tWrV
isv9f/31V1W8eHGVLl06eRbK4r333pNn4vjiiy8sr9uzZ4/MS1m9erX6/fff
pQ+yefNmmcvy/vvvq0ePHsVF3ljihzToRLzrajBHjx5VpUqVMr9p/vjjD8t4
upazjnL5VSa/64mDBw+qjz76SB0+fDgu958zZ44qU6aMOn/+vHkO7a1Pnz6m
rrh161aKa549e6b+/Oc/q759+4bcb9SoUXLNxIkT4yJvrPBDGnQj3nU1kK++
+kplyJBBjRgxQr1588Y2nq7lrKNcfpbJ73oi3rRr107adzDQ2/ny5ZO83bJl
S4qwmTNnynmrNU+OHTsmYSVKlIhqnCNR+CENyQraOspnyZIlYePqWs46yuVn
magn0saQIUNsxyDq1asneYvyCKRmzZpip3r69GnINeiLZM6cWa47ffp0XGSO
BX5IQzKCdXZQbo0bN47ofaVrOesol59l8qKeQP3etWuXmjZtmhowYIAaM2aM
Wr9+vaWdDWP727dvV6tWrQoJu337tpo/f766fPmy/D5+/Lj67LPPpC++dOlS
9eTJk6hlhO7AeBFsv4HtEX9nypRJ5ciRw/baqlWrSpls27Yt6ufHEz+kIVHo
VFdhX8I6b7A3XbhwISLZdSxnHeXyu0xe0xP37t1TlStXVl27dpW+FA60FeRH
w4YNzXg7duwQubNmzSrp69ChgxkG36TSpUuLnkXY3r17ZZwhffr0pn7FkT9/
fnXixImo5Fy4cKH4Fly/fj3Feeh13LtIkSK21+JbD3GWL18e1bPjjR/SkAh0
q6sbN26UuNWrVzfPQXdYfWsCXctZR7n8LpPX9ESLFi1UpUqVQvrMa9euVa1a
tTJ/Y/zm2rVrqmXLliFtD99mp06dEh9WhNWpU0cNHTpUfMRwX7Q3tM3gNuUE
/AsvXbok33kYH8J67FbfbBcvXpT7li1b1vZebdu2lThTp06N6NmJxg9pSAS6
1dVOnTpJvGHDhsnzIB90Fs7BR2/GjBkpbKi6lrOOcvldJi/pCdjTUK+bNGkS
Evb48WN5PwczadKkkLZnAD2LsMGDB4eEwWfQ+Faz+94Kjp8xY0ZVpUoV8TXE
9x6O1q1bp/BR3r9/v9wTvup2dO/eXeJMnz497HPdwA9piDe61VXoFLRlxEGd
RNn1799fxjmbN29uXt+vXz/zGl3LWUe5/C6Tl/QE+siwtaEPPn78ePkmCsfc
uXNt2x70LMJ++OGHkDC0K8yXQ/jJkyfDPgc2hkAbMcaFMK8C19eoUcP0TT9w
4ICcK1q0qO29evbsKXFWrFgR9rlu4Ic0xBvd6ip0k6ELGjVqlEKf4HqMmyAM
8p47d07O61rOOsrld5nioSdQz7NkyRLV0aZNG8d7G+kyDvTrhw8fLjZeK/+N
SNoebL5WFCtWTMKj3Ytp586dppz45gMYh8Rv+DTb0bFjR63HgP2QBoNkqat4
9xtyYG5uMK9fv1bvvvuuhGNsDehazjrK5XeZ4qEnMHfg/v37UR2or+HujT4S
2lxgGzS+2x8+fJgiflraHuYqpkVPYMzCsCsb40RY4wO/YaOyo2nTphIHYx06
4oc0GCRLXb169ar5bLv5txgzQTh0GdC1nHWUy+8yecnuFAzG+JYtWyb9aKMN
jB49OkWceLY9fBOG80HPnTu33CNwji2+RXHuxo0bltfAlxZjG7AV6Iof0pBI
3K6r+GaBPyziXLlyxTIO5uwifMGCBeY5XctZR7n8LJOX9AR8MRYtWmQZBv90
pAP7uwYSz7YHu/Pu3btt5cX3omEfxLelQe3ateU8/F6CwTcq9H+kflZu4Yc0
xBPd6iooWbKkxMH4phWGv9WhQ4fMc7qWs45y+VkmL+mJBw8eiD+RFcaYDeYc
BTJ79mw5b2VLhl8SwjAPygqj7eHeVmzYsEE1aNDAdj42/NxxffC6HVhbB+d7
9+4dcs2+ffs8Mf7rhzTEE93qKjDqI/xqg8E7A+vMYN5V4HpPupazjnL5WSYv
6QnMR4C9P9iWBtsP5jLBDvzixYsUYSNHjpT0Qa8GX4O1dRG2cuVKy+cZbQ/6
wArYEhCO/nrwc9HPyJMnj9gagnn58qX4q8NvEj7OBpiPi3YK/W63dqcu+CEN
8US3ugpevXqlChcurHLlymXO6zaYMGGCrB+KuRqB6FrOOsrlZ5m8pCfQp4as
b7/9turcubOaMmWKrNuNOa9dunRRd+7cMeN+9913qn79+qZ9Dv5+WK8Z7aFX
r17qww8/NO3E8AfAvMSffvopxfOMtgc/EPjBB6/7CipUqCBxMB8WvgPwSa9b
t66s7RTc5gJBmeFaPHvs2LFq3rx5ch1khP7xAn5IQ7zQsa4CrGuM9Y0RD/LA
Noa1LFGOZ86csbxG13LWUS6/yuQlPQEwHrNmzRqZO4oDaxFgD4hg8O0EH3H0
p2EXgv7EvFccGLOBLwD0KPrYiItzwfs84XqMKyAe/rZafxnnsM7f4sWLZZ4U
+g+Ylx0JGFuE7yzs1egfwmbgtfVV/ZCGeKFbXTVAHPjmosygJzCnO9w3pa7l
rKNcfpTJa3qCEEJIYqGeIIQQ4gT1BCGEECeoJwghhDhBPUEIIcQJ6glCCCFO
UE8QQghxgnqCEEKIE9QThBBCnKCeIIQQ4gT1BCGEECeoJwghhDhBPUEIIcQJ
6glCCCFOUE8QQghxgnoiPmC999SuOR+8p4DX8Lr8fsRuT95g/FB2OqbBLzJR
T8QO7CczcOBAVa5cOdnzMlu2bKpatWpq3bp1tu317Nmzqn379qpgwYKqQIEC
sr/lJ598ou7evZtg6aPD6/L7EXyjbNq0STVr1kyVL19e3bx50zKeH8pOxzT4
USbqidiAfcqKFy8ue1Yiv1Am2JfW2K8Se0wGs2fPHpU9e3a1evVq2YsM/Y/N
mzfLPsXYx/LRo0cupCRyvC6/Hzl69KgqVaqU+X1it0+dH8pOxzT4VaZweuLz
zz9Xf/vb32Ituu+YM2eO7DuM/YcN0Eb79Olj6orAPYuxpyX2q+3bt2/IvUaN
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
j9ivgoH+Qjrgiwu/ZQPIijmP0NmGf5TfQJ6i/4p869evn9vieJZkrkNpQZf6
p2P5xUomN+djw3/JWC8JB9JSunRplTVrVpkjZ+gNAL1ijC188MEHYh/CmpGY
V42+SbD97ciRIxIX/YzOnTurKVOmyHrg6HN06dJF3blzx1YujMngWti7MO7R
v39/VbduXZH11KlTttehHHAtxufHjh0r8uG6WrVq2a5D4mXQt0L+w24Z6COA
PMC8FcO3mUROstWhtKBj/dOx/GIhk9vrduBb4MyZM7LuBuYErlmzxnLOM0Df
AXMY0E+aNGmS+Bthrwg7oDtwP8zvxrFx40bH+AaYe4F1/hYvXizPQf8B87Ij
AboNvrMYA0GfD3XVr+t7wp8CY03od+H7BOWD//EbfcHA8RsSOclUh9KCrvVP
x/JLq0xu6wlCCCF6Qz1BCCHECeoJQgghTlBPEEIIcYJ6ghBCiBPUE4QQQpyg
niCEEOIE9QQhhBAnItETXHuMEEKSl3/84x+iJ+bPn28ZniFDBlnTiBBCSHLy
17/+VfQE1tKzgnYnQghJbjg+QQghxAnqCUIIIU5QTxBCCHGCeoIQQogT1BOE
EEKcoJ5wBvt7pHaPkcB9WZOJZE13PGGeRo6OeQWZnj596rYYKYgmn7ykJ77+
+mtVqFAh9c0338T1Odgna+DAgapcuXKyx3a2bNlk/91169bJnllWnD17VrVv
314VLFhQFShQQOXMmVN8je/evRtXWd0mWdMdT5inkaNrXt26dUuNGzdOvfvu
u2r27NmuygLSmk9e0hOQA7JiX9d4gX1RixcvrtKlSyfPQ95iH3Jj713ssR3M
nj17VPbs2dXq1atlr0X0PzZv3qzeeecd9f7776tHjx7FTV43SdZ0xxPmaeTo
lld4/qFDh1SnTp1UxowZ1dtvvy3vDLf1RCzyyUt64uDBg+qjjz5Shw8fjtsz
sDd7mTJl1Pnz581zf/zxh+rTp4+pK/CtYPDs2TPZn7xv374h9xo1apTEnzhx
YtzkdYtkTXc8YZ5Gjo55NW/ePLE9DBo0SF27dk21bt3adT0Rq3zykp5IBO3a
tRN9FAz0cL58+SSvtmzZYp6fOXOmnNu6dWvINceOHZOwEiVKuL6PeqxJ1nTH
E+Zp5OiYV/h+fPLkifm7W7duruuJWOUT9URKhgwZYjsGUa9ePckr5K9BzZo1
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
XZsMemLPnj0qe/bsavXq1bLHJvb727x5s+wXj738Hj165LaInoT5ag/aDNoV
9iBOFEePHlWlSpVS1apVU+vWrbPcw9RPZaZjWnSTCc8/dOiQ6tSpk8qYMaPs
qY56ST2RkmfPnsn+4X379g0JGzVqlKR94sSJLkjmbZivzhw8eFB99NFH6vDh
wwl5HvY8xr6UI0aMUG/evLGM46cy0zEtOso0b948lS1bNjVo0CB17do11bp1
a+oJC2bOnCnp27p1a0jYsWPHJKxEiRKu73PuNZiv+oC2i/xesmSJYzw/lZmO
adFRJtianjx5Yv7u1q0b9YQFNWvWVOnSpbMct0G/PHPmzJL+06dPuyCdd2G+
6sGRI0ekHBo3bhz2/eOnMtMxLTrKFAz1RChoN5kyZVI5cuSwjVO1alVJ/7Zt
2xIombdJ5nxF2nft2qWmTZumBgwYoMaMGaPWr18fYneGT8n27dvVqlWrQu5x
+/ZtNX/+fHX58mX5ffz4cfXZZ5+JzWjp0qUpvv+cgH2pYsWKYm+6cOFCWLn9
UmY6pkVHmaygnggFeh1pK1KkiG0cfIchzvLlyxMombdJ1ny9d++eqly5sura
tavYFnDg3Y73Q8OGDSXOjh07pL1kzZpV0t+hQwfz+oEDB6rSpUvLNyfC9u7d
q+bMmaPSp09vfmviyJ8/vzpx4kRYeTZu3Cjxq1evbp6D7rD6nvVTmemYFh1l
soJ6IpSLFy9K2sqWLWsbp23bthJn6tSpCZTM2yRrvrZo0UJVqlQpxL6zdu1a
1apVK/kbY5kYL2zZsmWInkA/4tSpU+qtt96SsDp16qihQ4eKvyTuCd0APRL8
7rcDPiyIO2zYMHkm5IPOwrn33ntPzZgxw5xD4acy0zEtOspkBfVEKPv375e0
wY/cju7du0uc6dOnJ1Ayb5OM+Qr7Mt7BTZo0CQl7/Pix+LMEMmnSpBA9YYBv
ToQNHjw4JAy+rUa/wmkuFPQK2ibiwYcFZdG/f38ZS23evLl5j379+kl8P5WZ
jmnRUSYrqCdCOXDggKStaNGitnF69uwpcVasWJFAybxNMuYr7DmwPcNmNH78
ePl+d2Lu3Lm2egLfnAj74YcfQsLw/ocfI8JPnjxpe3/oJkMXNGrUKIVOwT0w
boIwyHvu3DlflZmOadFRJiuoJ0LBOCHSBp9mOzp27Oj62JLXSNZ8Ndq5ccAG
NXz4cBmTCLZFRaInMD5hRbFixSQcvkx24N1vyIH5v8G8fv1a5t0ifOHChb4q
Mx3ToqNMVlBPhPL8+XNJG+Yh2tG0aVOJA58TEhnJmq+YXwubAfRDoL7AUaNG
DfXw4UMzblr0BObthtMTV69eNZ9tN8cXYyYIhy7zU5npmBYdZbKCesKaLFmy
SPpu3LhhGY41DuBvgn48iZxkz1eMSS9btkxsPsb7evTo0WZ4vPUE1nGCPyzi
XblyxTIO5gUjfMGCBfLbT2WmY1p0lCkY6glrateuLemDT0ow6JtD/0fiW0JS
kmz5Cr+hRYsWWYZhLgXyokePHua5eOsJULJkSYmHMVQrDJ8rrO8D/FRmOqZF
R5mCoZ6wBuveIH29e/cOCdu3b5/r40peJdny9cGDB6pKlSqWYcYYJubIGaAd
4lybNm1C4mOtPoRhvp4Vhp7AfZ3A3AvEg29tMHgv5cuXT+Z2Ges9+anMdEyL
jjIFg7k/kAN+canB73ri5cuX4ksOn0b4OBtgvizaEPS71bqaxJlky1fMd8a8
h2DbMsav0fYwZvHixQvz/MiRI6Vd4RszOD7WmUbYypUrLZ9l6IkNGzY4yvTq
1StVuHBhlStXLnNut8GECRNkjVLM1zDwU5npmBYdZQoEdQ+2r0B/6Ujxu54A
KLMKFSqIL8LYsWNlDcW6devKms+wM5PoSKZ8hQ0I7QTrMnfu3FlNmTJFffHF
FzI/u0uXLurOnTsS77vvvlP169c3bdXwS0V+4L3dq1cv9eGHH5rjGcg3zNH9
6aefUjzL0BPwV8J8DazlZsf58+dVmTJlJC7kgW2sXbt2Ui5nzpwJie+nMtMx
LTrKhH4n1gsw/OiMA3KifoXrt4Jk0BMA4347d+4UWzL6h8gbL6yLqTvJlK8Y
n1yzZo3Mc8aBdTN+/fXXFHHwjY+5DLD7YEwD35KYo40D45fwi8E3JWxBiItz
wXue4Xr4ViEe/rZbJ9wA8eCbizKAnsC8bqfvVj+VmY5p0U0m1DmsGYb+Luqa
US/xG/UPdS0cyaInCCGERAf1BCGEECeoJwghhDhBPUEIIcQJ6glCCCFOUE8Q
QghxgnqCEEKIE5HoCczHOHbsmOXhhTXDCCGEhAdzM63e87NmzQqrJ4LXUA48
oGcIIYR4H2ONSrvDTk9MnjxZ5p/bHYHrmBBCCPEu8+fPd3zfo29BCCGERML/
A/uGv98=
         "], {{0, 213}, {394, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       BaseStyle->"ImageGraphics",
       ImageSize->{221.33333333333206`, Automatic},
       ImageSizeRaw->{394, 213},
       PlotRange->{{0, 394}, {0, 213}}], "]"}]}], ",", "6"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.668702078282091*^9, 3.66870211793509*^9}, {
  3.668702177127315*^9, 3.668702233989271*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"\<\"-\"\>", "\<\"sin30\"\>", "\<\"-\"\>", "\<\"cos30\"\>", \
"\<\"cos\"\>", "\<\"30\"\>"},
     {"\<\"sin\"\>", "\<\"30\"\>", "\<\"0\"\>", "\<\"0\"\>", "\<\"0\"\>", "\<\
\"0\"\>"},
     {"\<\"1\"\>", "\<\"0\"\>", "\<\"fl\"\>", "\<\"0\"\>", "\<\"-\"\>", \
"\<\"sin60\"\>"},
     {"\<\"cos\"\>", "\<\"60\"\>", "\<\"0\"\>", "\<\"0\"\>", "\<\"-\"\>", "\<\
\"cos\"\>"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.668702106670741*^9, 3.668702118791535*^9}, 
   3.668702186579067*^9, {3.668702218381112*^9, 3.6687022347660313`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Head", "[", "5", "]"}], "\[Equal]", "Integer"}]], "Input",
 CellChangeTimes->{{3.668704023595462*^9, 3.6687040296956472`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.668704030500527*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "\[Equal]", "Inverse"}]], "Input",
 CellChangeTimes->{{3.668704068733685*^9, 3.6687040722415323`*^9}}],

Cell[BoxData[
 RowBox[{"List", "\[Equal]", "Inverse"}]], "Output",
 CellChangeTimes->{3.6687040728401327`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{"Real", "===", "Integer"}], ")"}]], "Input",
 CellChangeTimes->{{3.668704074291512*^9, 3.668704106427435*^9}, {
  3.668704140577367*^9, 3.668704147622726*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.6687041440432873`*^9, 3.668704148028679*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"Pi", "/", "3"}], "]"}], ",", "800"}], "]"}]], "Input",
 CellChangeTimes->{{3.668731685834652*^9, 3.6687317044552402`*^9}}],

Cell[BoxData["0.\
866025403784438646763723170752936183471402626905190314027903489725966508454400\
018540573093378624287837813070707703351514984972547499476239405827756047186824\
264046615951152791033987410050542337461632507656171633451661443325336127334460\
918985613523565830183930794009524993268689929694733825173753288025378309174064\
803050473801093595162541572914761979916498894912254144357231916458673612081992\
293927698833979031909176833055421586890447189158051044152762450835011760355572\
144347995478182898543584249036449746648242141510393204301994369348768791158658\
915697996491503919351438526956684781656051853632009624553384115599644187820570\
711008371376051186497135415529949229737993832144448898073918979195114427426451\
788016926404032190986172330529844861436432632076911332349210010597742077639220\
590643267253517595825008344647207740423035638572`800."], "Output",
 CellChangeTimes->{{3.668731689305271*^9, 3.668731704819302*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{959, 1013},
WindowMargins->{{Automatic, -9}, {Automatic, -8}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
Magnification:>1.5 Inherited,
FrontEndVersion->"10.3 for Linux x86 (64-bit) (October 9, 2015)",
StyleDefinitions->"Default.nb"
]

